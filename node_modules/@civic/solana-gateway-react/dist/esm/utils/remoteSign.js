import logger from '../logger';
import { IFRAME_ID } from '../constants';
export const eventEmitter = (window) => {
    return {
        postMessage: (message, targetOrigin) => {
            window.postMessage(message, targetOrigin);
        },
    };
};
// TODO: Duplicate types in CivicSign
// Move to a central repo or use TS paths
export var CivicSignEventTypeResponse;
(function (CivicSignEventTypeResponse) {
    CivicSignEventTypeResponse["RESPONSE_PUBLIC_KEY"] = "RESPONSE_PUBLIC_KEY";
    CivicSignEventTypeResponse["RESPONSE_DID"] = "RESPONSE_DID";
    CivicSignEventTypeResponse["RESPONSE_SIGNED_PROOF"] = "RESPONSE_SIGNED_PROOF";
})(CivicSignEventTypeResponse || (CivicSignEventTypeResponse = {}));
export var CivicSignEventTypeRequest;
(function (CivicSignEventTypeRequest) {
    CivicSignEventTypeRequest["REQUEST_PUBLIC_KEY"] = "REQUEST_PUBLIC_KEY";
    CivicSignEventTypeRequest["REQUEST_DID"] = "REQUEST_DID";
    CivicSignEventTypeRequest["REQUEST_SIGNED_PROOF"] = "REQUEST_SIGNED_PROOF";
})(CivicSignEventTypeRequest || (CivicSignEventTypeRequest = {}));
export class RemoteSignWindowEventEmitter {
    constructor(targetWindow) {
        this.targetWindow = targetWindow;
    }
    sendPublicKey(publicKey) {
        this.emit({
            event: CivicSignEventTypeResponse.RESPONSE_PUBLIC_KEY,
            data: publicKey,
        });
    }
    sendDid(did) {
        this.emit({
            event: CivicSignEventTypeResponse.RESPONSE_DID,
            data: did,
        });
    }
    sendSignedProof(proof) {
        this.emit({
            event: CivicSignEventTypeResponse.RESPONSE_SIGNED_PROOF,
            data: proof,
        });
    }
    emit(event) {
        this.targetWindow.postMessage(event, '*');
    }
}
export const remoteSignWindowEventEmitterImplementation = () => {
    var _a;
    const iFrameWindow = (_a = document.getElementById(IFRAME_ID)) === null || _a === void 0 ? void 0 : _a.contentWindow;
    if (!iFrameWindow) {
        logger.error('no iFrame window present');
        return null;
    }
    return new RemoteSignWindowEventEmitter(eventEmitter(iFrameWindow));
};
