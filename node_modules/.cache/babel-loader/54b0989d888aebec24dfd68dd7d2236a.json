{"ast":null,"code":"const logLevels = ['debug', 'info', 'warn', 'error'];\nexport const allowLogging = (logLevel, atLeastlogLevel) => logLevels.indexOf(logLevel) <= logLevels.indexOf(atLeastlogLevel);\nexport const DEFAULT_LOG_LEVEL = process.env.REACT_APP_LOG_LEVEL || 'warn';\nexport class LoggingProvider {\n  constructor(logger) {\n    let logLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_LOG_LEVEL;\n    this.logger = logger;\n\n    if (typeof window !== 'undefined') {\n      const urlSearchParams = new URLSearchParams(window.location.search);\n      const urllogLevel = urlSearchParams.get('logLevel');\n      this.logLevel = urllogLevel || logLevel;\n    } else {\n      this.logLevel = logLevel;\n    }\n  }\n\n  debug(message, object) {\n    if (allowLogging(this.logLevel, 'debug')) this.logger.debug(message, object);\n  }\n\n  info(message, object) {\n    if (allowLogging(this.logLevel, 'info')) this.logger.info(message, object);\n  }\n\n  warn(message, object) {\n    if (allowLogging(this.logLevel, 'warn')) this.logger.warn(message, object);\n  }\n\n  error(message, exception) {\n    if (allowLogging(this.logLevel, 'error')) this.logger.error(message, exception);\n  }\n\n}","map":{"version":3,"sources":["F:/SitePortfolio/skillfond/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/logger/provider.logger.js"],"names":["logLevels","allowLogging","logLevel","atLeastlogLevel","indexOf","DEFAULT_LOG_LEVEL","process","env","REACT_APP_LOG_LEVEL","LoggingProvider","constructor","logger","window","urlSearchParams","URLSearchParams","location","search","urllogLevel","get","debug","message","object","info","warn","error","exception"],"mappings":"AAAA,MAAMA,SAAS,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,MAAlB,EAA0B,OAA1B,CAAlB;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,eAAX,KAA+BH,SAAS,CAACI,OAAV,CAAkBF,QAAlB,KAA+BF,SAAS,CAACI,OAAV,CAAkBD,eAAlB,CAAnF;AACP,OAAO,MAAME,iBAAiB,GAAGC,OAAO,CAACC,GAAR,CAAYC,mBAAZ,IAAmC,MAA7D;AACP,OAAO,MAAMC,eAAN,CAAsB;AACzBC,EAAAA,WAAW,CAACC,MAAD,EAAuC;AAAA,QAA9BT,QAA8B,uEAAnBG,iBAAmB;AAC9C,SAAKM,MAAL,GAAcA,MAAd;;AACA,QAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,YAAMC,eAAe,GAAG,IAAIC,eAAJ,CAAoBF,MAAM,CAACG,QAAP,CAAgBC,MAApC,CAAxB;AACA,YAAMC,WAAW,GAAGJ,eAAe,CAACK,GAAhB,CAAoB,UAApB,CAApB;AACA,WAAKhB,QAAL,GAAgBe,WAAW,IAAIf,QAA/B;AACH,KAJD,MAKK;AACD,WAAKA,QAAL,GAAgBA,QAAhB;AACH;AACJ;;AACDiB,EAAAA,KAAK,CAACC,OAAD,EAAUC,MAAV,EAAkB;AACnB,QAAIpB,YAAY,CAAC,KAAKC,QAAN,EAAgB,OAAhB,CAAhB,EACI,KAAKS,MAAL,CAAYQ,KAAZ,CAAkBC,OAAlB,EAA2BC,MAA3B;AACP;;AACDC,EAAAA,IAAI,CAACF,OAAD,EAAUC,MAAV,EAAkB;AAClB,QAAIpB,YAAY,CAAC,KAAKC,QAAN,EAAgB,MAAhB,CAAhB,EACI,KAAKS,MAAL,CAAYW,IAAZ,CAAiBF,OAAjB,EAA0BC,MAA1B;AACP;;AACDE,EAAAA,IAAI,CAACH,OAAD,EAAUC,MAAV,EAAkB;AAClB,QAAIpB,YAAY,CAAC,KAAKC,QAAN,EAAgB,MAAhB,CAAhB,EACI,KAAKS,MAAL,CAAYY,IAAZ,CAAiBH,OAAjB,EAA0BC,MAA1B;AACP;;AACDG,EAAAA,KAAK,CAACJ,OAAD,EAAUK,SAAV,EAAqB;AACtB,QAAIxB,YAAY,CAAC,KAAKC,QAAN,EAAgB,OAAhB,CAAhB,EACI,KAAKS,MAAL,CAAYa,KAAZ,CAAkBJ,OAAlB,EAA2BK,SAA3B;AACP;;AA3BwB","sourcesContent":["const logLevels = ['debug', 'info', 'warn', 'error'];\nexport const allowLogging = (logLevel, atLeastlogLevel) => logLevels.indexOf(logLevel) <= logLevels.indexOf(atLeastlogLevel);\nexport const DEFAULT_LOG_LEVEL = process.env.REACT_APP_LOG_LEVEL || 'warn';\nexport class LoggingProvider {\n    constructor(logger, logLevel = DEFAULT_LOG_LEVEL) {\n        this.logger = logger;\n        if (typeof window !== 'undefined') {\n            const urlSearchParams = new URLSearchParams(window.location.search);\n            const urllogLevel = urlSearchParams.get('logLevel');\n            this.logLevel = urllogLevel || logLevel;\n        }\n        else {\n            this.logLevel = logLevel;\n        }\n    }\n    debug(message, object) {\n        if (allowLogging(this.logLevel, 'debug'))\n            this.logger.debug(message, object);\n    }\n    info(message, object) {\n        if (allowLogging(this.logLevel, 'info'))\n            this.logger.info(message, object);\n    }\n    warn(message, object) {\n        if (allowLogging(this.logLevel, 'warn'))\n            this.logger.warn(message, object);\n    }\n    error(message, exception) {\n        if (allowLogging(this.logLevel, 'error'))\n            this.logger.error(message, exception);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}