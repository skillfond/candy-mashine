{"ast":null,"code":"import React from 'react';\nimport { clusterEndpoint } from './config';\nimport { GatewayProvider } from '../gateway/GatewayContext';\nimport { chainImplementation } from './chainImplementation';\nimport logger from '../logger'; // eslint-disable-next-line import/prefer-default-export\n\nexport var SolanaGatewayProvider = function SolanaGatewayProvider(_ref) {\n  var _ref$children = _ref.children,\n      children = _ref$children === void 0 ? null : _ref$children,\n      wallet = _ref.wallet,\n      _ref$clusterUrl = _ref.clusterUrl,\n      clusterUrl = _ref$clusterUrl === void 0 ? clusterEndpoint('mainnet-beta') : _ref$clusterUrl,\n      gatekeeperNetwork = _ref.gatekeeperNetwork,\n      wrapper = _ref.wrapper,\n      logo = _ref.logo,\n      _ref$stage = _ref.stage,\n      stage = _ref$stage === void 0 ? 'prod' : _ref$stage,\n      redirectUrl = _ref.redirectUrl,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {\n    autoShowModal: true\n  } : _ref$options;\n\n  if (wallet && wallet.publicKey && gatekeeperNetwork) {\n    var publicKey = wallet.publicKey,\n        signTransaction = wallet.signTransaction;\n    var chainImpl = chainImplementation({\n      clusterUrl: clusterUrl,\n      publicKey: publicKey,\n      signTransaction: signTransaction,\n      gatekeeperNetworkAddress: gatekeeperNetwork,\n      stage: stage\n    });\n    var providerWallet = {\n      publicKey: publicKey.toBase58()\n    };\n    logger.info('Client Options', options);\n    return React.createElement(GatewayProvider, {\n      wallet: providerWallet,\n      stage: stage,\n      chainImplementation: chainImpl,\n      gatekeeperNetwork: gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58(),\n      wrapper: wrapper,\n      logo: logo,\n      redirectUrl: redirectUrl,\n      options: options\n    }, children);\n  }\n\n  return React.createElement(React.Fragment, null, children);\n};\nexport { useSolanaGateway } from './chainImplementation';\nexport * from './types';","map":{"version":3,"sources":["C:/Test Mint/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/solana/index.js"],"names":["React","clusterEndpoint","GatewayProvider","chainImplementation","logger","SolanaGatewayProvider","children","wallet","clusterUrl","gatekeeperNetwork","wrapper","logo","stage","redirectUrl","options","autoShowModal","publicKey","signTransaction","chainImpl","gatekeeperNetworkAddress","providerWallet","toBase58","info","createElement","Fragment","useSolanaGateway"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,UAAhC;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,OAAOC,MAAP,MAAmB,WAAnB,C,CACA;;AACA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,OAAkL;AAAA,2BAA/KC,QAA+K;AAAA,MAA/KA,QAA+K,8BAApK,IAAoK;AAAA,MAA9JC,MAA8J,QAA9JA,MAA8J;AAAA,6BAAtJC,UAAsJ;AAAA,MAAtJA,UAAsJ,gCAAzIP,eAAe,CAAC,cAAD,CAA0H;AAAA,MAAxGQ,iBAAwG,QAAxGA,iBAAwG;AAAA,MAArFC,OAAqF,QAArFA,OAAqF;AAAA,MAA5EC,IAA4E,QAA5EA,IAA4E;AAAA,wBAAtEC,KAAsE;AAAA,MAAtEA,KAAsE,2BAA9D,MAA8D;AAAA,MAAtDC,WAAsD,QAAtDA,WAAsD;AAAA,0BAAzCC,OAAyC;AAAA,MAAzCA,OAAyC,6BAA/B;AAAEC,IAAAA,aAAa,EAAE;AAAjB,GAA+B;;AACnN,MAAIR,MAAM,IAAIA,MAAM,CAACS,SAAjB,IAA8BP,iBAAlC,EAAqD;AACjD,QAAQO,SAAR,GAAuCT,MAAvC,CAAQS,SAAR;AAAA,QAAmBC,eAAnB,GAAuCV,MAAvC,CAAmBU,eAAnB;AACA,QAAMC,SAAS,GAAGf,mBAAmB,CAAC;AAClCK,MAAAA,UAAU,EAAVA,UADkC;AAElCQ,MAAAA,SAAS,EAATA,SAFkC;AAGlCC,MAAAA,eAAe,EAAfA,eAHkC;AAIlCE,MAAAA,wBAAwB,EAAEV,iBAJQ;AAKlCG,MAAAA,KAAK,EAALA;AALkC,KAAD,CAArC;AAOA,QAAMQ,cAAc,GAAG;AACnBJ,MAAAA,SAAS,EAAEA,SAAS,CAACK,QAAV;AADQ,KAAvB;AAGAjB,IAAAA,MAAM,CAACkB,IAAP,CAAY,gBAAZ,EAA8BR,OAA9B;AACA,WAAQd,KAAK,CAACuB,aAAN,CAAoBrB,eAApB,EAAqC;AAAEK,MAAAA,MAAM,EAAEa,cAAV;AAA0BR,MAAAA,KAAK,EAAEA,KAAjC;AAAwCT,MAAAA,mBAAmB,EAAEe,SAA7D;AAAwET,MAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACY,QAAlB,EAAjK;AAA+LX,MAAAA,OAAO,EAAEA,OAAxM;AAAiNC,MAAAA,IAAI,EAAEA,IAAvN;AAA6NE,MAAAA,WAAW,EAAEA,WAA1O;AAAuPC,MAAAA,OAAO,EAAEA;AAAhQ,KAArC,EAAgTR,QAAhT,CAAR;AACH;;AACD,SAAON,KAAK,CAACuB,aAAN,CAAoBvB,KAAK,CAACwB,QAA1B,EAAoC,IAApC,EAA0ClB,QAA1C,CAAP;AACH,CAjBM;AAkBP,SAASmB,gBAAT,QAAiC,uBAAjC;AACA,cAAc,SAAd","sourcesContent":["import React from 'react';\nimport { clusterEndpoint } from './config';\nimport { GatewayProvider } from '../gateway/GatewayContext';\nimport { chainImplementation } from './chainImplementation';\nimport logger from '../logger';\n// eslint-disable-next-line import/prefer-default-export\nexport const SolanaGatewayProvider = ({ children = null, wallet, clusterUrl = clusterEndpoint('mainnet-beta'), gatekeeperNetwork, wrapper, logo, stage = 'prod', redirectUrl, options = { autoShowModal: true }, }) => {\n    if (wallet && wallet.publicKey && gatekeeperNetwork) {\n        const { publicKey, signTransaction } = wallet;\n        const chainImpl = chainImplementation({\n            clusterUrl,\n            publicKey,\n            signTransaction,\n            gatekeeperNetworkAddress: gatekeeperNetwork,\n            stage,\n        });\n        const providerWallet = {\n            publicKey: publicKey.toBase58(),\n        };\n        logger.info('Client Options', options);\n        return (React.createElement(GatewayProvider, { wallet: providerWallet, stage: stage, chainImplementation: chainImpl, gatekeeperNetwork: gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58(), wrapper: wrapper, logo: logo, redirectUrl: redirectUrl, options: options }, children));\n    }\n    return React.createElement(React.Fragment, null, children);\n};\nexport { useSolanaGateway } from './chainImplementation';\nexport * from './types';\n"]},"metadata":{},"sourceType":"module"}