{"ast":null,"code":"import _asyncToGenerator from \"F:\\\\SitePortfolio\\\\skillfond\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _regeneratorRuntime from \"F:\\\\SitePortfolio\\\\skillfond\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport logger from '../logger';\nexport var sleep = function sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n};\nexport var pollUntilConditionMet = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fnToRun, conditionChecker) {\n    var interval,\n        retries,\n        result,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            interval = _args.length > 2 && _args[2] !== undefined ? _args[2] : 2000;\n            retries = _args.length > 3 && _args[3] !== undefined ? _args[3] : 20;\n\n            if (!(retries <= 0)) {\n              _context.next = 5;\n              break;\n            }\n\n            logger.debug('WaitForStatusChange - no more retries');\n            throw new Error(\"pollUntilConditionMet all retries used calling \".concat(fnToRun));\n\n          case 5:\n            logger.debug(\"calling \".concat(fnToRun.name, \" retries = \").concat(retries));\n            _context.next = 8;\n            return fnToRun();\n\n          case 8:\n            result = _context.sent;\n\n            if (!conditionChecker(result)) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\", result);\n\n          case 11:\n            logger.debug(\"Waiting \".concat(interval, \"ms before running \").concat(fnToRun.name, \" and checking condition \").concat(conditionChecker));\n            _context.next = 14;\n            return sleep(interval);\n\n          case 14:\n            return _context.abrupt(\"return\", pollUntilConditionMet(fnToRun, conditionChecker, interval, retries - 1));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function pollUntilConditionMet(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["F:/SitePortfolio/skillfond/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/actionCreator/utils.js"],"names":["logger","sleep","ms","Promise","resolve","setTimeout","pollUntilConditionMet","fnToRun","conditionChecker","interval","retries","debug","Error","name","result"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,EAAD,EAAQ;AACzB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD;AAAA,WAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAvB;AAAA,GAAZ,CAAP;AACH,CAFM;AAGP,OAAO,IAAMI,qBAAqB;AAAA,sEAAG,iBAAOC,OAAP,EAAgBC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkCC,YAAAA,QAAlC,2DAA6C,IAA7C;AAAmDC,YAAAA,OAAnD,2DAA6D,EAA7D;;AAAA,kBAC7BA,OAAO,IAAI,CADkB;AAAA;AAAA;AAAA;;AAE7BV,YAAAA,MAAM,CAACW,KAAP,CAAa,uCAAb;AAF6B,kBAGvB,IAAIC,KAAJ,0DAA4DL,OAA5D,EAHuB;;AAAA;AAKjCP,YAAAA,MAAM,CAACW,KAAP,mBAAwBJ,OAAO,CAACM,IAAhC,wBAAkDH,OAAlD;AALiC;AAAA,mBAMXH,OAAO,EANI;;AAAA;AAM3BO,YAAAA,MAN2B;;AAAA,iBAO7BN,gBAAgB,CAACM,MAAD,CAPa;AAAA;AAAA;AAAA;;AAAA,6CAQtBA,MARsB;;AAAA;AAUjCd,YAAAA,MAAM,CAACW,KAAP,mBAAwBF,QAAxB,+BAAqDF,OAAO,CAACM,IAA7D,qCAA4FL,gBAA5F;AAViC;AAAA,mBAW3BP,KAAK,CAACQ,QAAD,CAXsB;;AAAA;AAAA,6CAY1BH,qBAAqB,CAACC,OAAD,EAAUC,gBAAV,EAA4BC,QAA5B,EAAsCC,OAAO,GAAG,CAAhD,CAZK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBJ,qBAAqB;AAAA;AAAA;AAAA,GAA3B","sourcesContent":["import logger from '../logger';\nexport const sleep = (ms) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n};\nexport const pollUntilConditionMet = async (fnToRun, conditionChecker, interval = 2000, retries = 20) => {\n    if (retries <= 0) {\n        logger.debug('WaitForStatusChange - no more retries');\n        throw new Error(`pollUntilConditionMet all retries used calling ${fnToRun}`);\n    }\n    logger.debug(`calling ${fnToRun.name} retries = ${retries}`);\n    const result = (await fnToRun());\n    if (conditionChecker(result)) {\n        return result;\n    }\n    logger.debug(`Waiting ${interval}ms before running ${fnToRun.name} and checking condition ${conditionChecker}`);\n    await sleep(interval);\n    return pollUntilConditionMet(fnToRun, conditionChecker, interval, retries - 1);\n};\n"]},"metadata":{},"sourceType":"module"}