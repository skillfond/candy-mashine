{"ast":null,"code":"import { useCallback, useEffect } from 'react';\nimport logger from '../logger';\nimport useWalletHooks from './useWalletHooks';\n\nconst useGatekeeper = (_ref, state, dispatch) => {\n  let {\n    wallet,\n    stage,\n    gatekeeperClient\n  } = _ref;\n  const {\n    expectWalletConnected\n  } = useWalletHooks(wallet, state, dispatch);\n  const {\n    gatekeeperNetworkAddress\n  } = state;\n  /**\n   * if a request is not already in progress, initiate a request to the gatekeeper for a new token\n   * and dispatch an event so we know it's in progress\n   */\n\n  const waitForGatekeeperIssuanceRequest = useCallback( // eslint-disable-next-line @typescript-eslint/no-shadow\n  async _ref2 => {\n    let {\n      payload,\n      proof\n    } = _ref2;\n    const connectedWallet = expectWalletConnected();\n\n    if (connectedWallet) {\n      logger.debug('waitForGatekeeperIssuanceRequest ready to call requestGatewayTokenFromGatekeeper', {\n        payload\n      });\n      dispatch({\n        type: 'requestGatekeeperIssuance'\n      });\n      const requestGatewayTokenFromGatekeeperResult = await gatekeeperClient().requestGatewayTokenFromGatekeeper({\n        wallet: connectedWallet,\n        payload,\n        proof\n      });\n      logger.debug('requestGatewayTokenFromGatekeeperResult', requestGatewayTokenFromGatekeeperResult);\n\n      if (requestGatewayTokenFromGatekeeperResult.status >= 400) {\n        logger.error('Error requesting token from gatekeeper');\n        dispatch({\n          type: 'requestGatekeeperIssuanceFailed'\n        });\n        throw new Error('Error requesting token from gatekeeper');\n      }\n\n      logger.debug('Successfully created gatekeeper token');\n      dispatch({\n        type: 'requestGatekeeperIssuanceComplete'\n      });\n    }\n  }, [gatekeeperClient, expectWalletConnected, stage]);\n  /**\n   * Update the state when the Gatekeeper network changes\n   */\n\n  useEffect(() => {\n    if (wallet && wallet.publicKey && gatekeeperNetworkAddress) {\n      dispatch({\n        type: 'gatekeeperNetworkChanged',\n        gatekeeperNetworkAddress\n      });\n    }\n  }, [gatekeeperNetworkAddress]);\n  return {\n    waitForGatekeeperIssuanceRequest,\n    gatekeeperClient\n  };\n};\n\nexport default useGatekeeper;","map":{"version":3,"sources":["F:/SitePortfolio/skillfond/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/useGatekeeper.js"],"names":["useCallback","useEffect","logger","useWalletHooks","useGatekeeper","state","dispatch","wallet","stage","gatekeeperClient","expectWalletConnected","gatekeeperNetworkAddress","waitForGatekeeperIssuanceRequest","payload","proof","connectedWallet","debug","type","requestGatewayTokenFromGatekeeperResult","requestGatewayTokenFromGatekeeper","status","error","Error","publicKey"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AACA,MAAMC,aAAa,GAAG,OAAuCC,KAAvC,EAA8CC,QAA9C,KAA2D;AAAA,MAA1D;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,GAA0D;AAC7E,QAAM;AAAEC,IAAAA;AAAF,MAA4BP,cAAc,CAACI,MAAD,EAASF,KAAT,EAAgBC,QAAhB,CAAhD;AACA,QAAM;AAAEK,IAAAA;AAAF,MAA+BN,KAArC;AACA;AACJ;AACA;AACA;;AACI,QAAMO,gCAAgC,GAAGZ,WAAW,EACpD;AACA,iBAA8B;AAAA,QAAvB;AAAEa,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAuB;AAC1B,UAAMC,eAAe,GAAGL,qBAAqB,EAA7C;;AACA,QAAIK,eAAJ,EAAqB;AACjBb,MAAAA,MAAM,CAACc,KAAP,CAAa,kFAAb,EAAiG;AAC7FH,QAAAA;AAD6F,OAAjG;AAGAP,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACA,YAAMC,uCAAuC,GAAG,MAAMT,gBAAgB,GAAGU,iCAAnB,CAAqD;AACvGZ,QAAAA,MAAM,EAAEQ,eAD+F;AAEvGF,QAAAA,OAFuG;AAGvGC,QAAAA;AAHuG,OAArD,CAAtD;AAKAZ,MAAAA,MAAM,CAACc,KAAP,CAAa,yCAAb,EAAwDE,uCAAxD;;AACA,UAAIA,uCAAuC,CAACE,MAAxC,IAAkD,GAAtD,EAA2D;AACvDlB,QAAAA,MAAM,CAACmB,KAAP,CAAa,wCAAb;AACAf,QAAAA,QAAQ,CAAC;AAAEW,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAR;AACA,cAAM,IAAIK,KAAJ,CAAU,wCAAV,CAAN;AACH;;AACDpB,MAAAA,MAAM,CAACc,KAAP,CAAa,uCAAb;AACAV,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACH;AACJ,GAvBmD,EAuBjD,CAACR,gBAAD,EAAmBC,qBAAnB,EAA0CF,KAA1C,CAvBiD,CAApD;AAwBA;AACJ;AACA;;AACIP,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,MAAM,IAAIA,MAAM,CAACgB,SAAjB,IAA8BZ,wBAAlC,EAA4D;AACxDL,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE,0BAAR;AAAoCN,QAAAA;AAApC,OAAD,CAAR;AACH;AACJ,GAJQ,EAIN,CAACA,wBAAD,CAJM,CAAT;AAKA,SAAO;AACHC,IAAAA,gCADG;AAEHH,IAAAA;AAFG,GAAP;AAIH,CA3CD;;AA4CA,eAAeL,aAAf","sourcesContent":["import { useCallback, useEffect } from 'react';\nimport logger from '../logger';\nimport useWalletHooks from './useWalletHooks';\nconst useGatekeeper = ({ wallet, stage, gatekeeperClient, }, state, dispatch) => {\n    const { expectWalletConnected } = useWalletHooks(wallet, state, dispatch);\n    const { gatekeeperNetworkAddress } = state;\n    /**\n     * if a request is not already in progress, initiate a request to the gatekeeper for a new token\n     * and dispatch an event so we know it's in progress\n     */\n    const waitForGatekeeperIssuanceRequest = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    async ({ payload, proof }) => {\n        const connectedWallet = expectWalletConnected();\n        if (connectedWallet) {\n            logger.debug('waitForGatekeeperIssuanceRequest ready to call requestGatewayTokenFromGatekeeper', {\n                payload,\n            });\n            dispatch({ type: 'requestGatekeeperIssuance' });\n            const requestGatewayTokenFromGatekeeperResult = await gatekeeperClient().requestGatewayTokenFromGatekeeper({\n                wallet: connectedWallet,\n                payload,\n                proof,\n            });\n            logger.debug('requestGatewayTokenFromGatekeeperResult', requestGatewayTokenFromGatekeeperResult);\n            if (requestGatewayTokenFromGatekeeperResult.status >= 400) {\n                logger.error('Error requesting token from gatekeeper');\n                dispatch({ type: 'requestGatekeeperIssuanceFailed' });\n                throw new Error('Error requesting token from gatekeeper');\n            }\n            logger.debug('Successfully created gatekeeper token');\n            dispatch({ type: 'requestGatekeeperIssuanceComplete' });\n        }\n    }, [gatekeeperClient, expectWalletConnected, stage]);\n    /**\n     * Update the state when the Gatekeeper network changes\n     */\n    useEffect(() => {\n        if (wallet && wallet.publicKey && gatekeeperNetworkAddress) {\n            dispatch({ type: 'gatekeeperNetworkChanged', gatekeeperNetworkAddress });\n        }\n    }, [gatekeeperNetworkAddress]);\n    return {\n        waitForGatekeeperIssuanceRequest,\n        gatekeeperClient,\n    };\n};\nexport default useGatekeeper;\n"]},"metadata":{},"sourceType":"module"}