{"ast":null,"code":"import _defineProperty from \"C:\\\\Test Mint\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport { clusterApiUrl } from '@solana/web3.js';\nexport var clusterEndpoint = function clusterEndpoint(cluster) {\n  switch (cluster) {\n    case 'civicnet':\n      return 'https://d3ab7dlfud2b5u.cloudfront.net';\n\n    case 'localnet':\n      return 'http://localhost:8899';\n\n    default:\n      return clusterApiUrl(cluster);\n  }\n}; // reverse lookup of cluster from url\n// note - this is a \"best-guess\" heuristic. If the client passes an unrecognised\n// url, default to mainnet\n\nexport var urlToCluster = function urlToCluster(clusterUrl) {\n  var supportedClusters = ['devnet', 'testnet', 'mainnet-beta', 'civicnet', 'localnet'];\n  var matchedUrlCluster = supportedClusters.find(function (cluster) {\n    return clusterEndpoint(cluster) === clusterUrl;\n  });\n  if (matchedUrlCluster) return matchedUrlCluster;\n  var matchedStringCluster = supportedClusters.find(function (cluster) {\n    return clusterUrl.indexOf(cluster) >= 0;\n  });\n  if (matchedStringCluster) return matchedStringCluster;\n  return 'mainnet-beta';\n};\nvar solanaVersionedEndpoint = 'v1/token/solana';\nexport var GATEKEEPER_ENDPOINTS = {\n  local: \"http://localhost:3001/local/\".concat(solanaVersionedEndpoint),\n  test: \"http://localhost:3001/local/\".concat(solanaVersionedEndpoint),\n  dev: \"https://dev-gatekeeper-api.civic.com/\".concat(solanaVersionedEndpoint),\n  preprod: \"https://preprod-gatekeeper-api.civic.com/\".concat(solanaVersionedEndpoint),\n  prod: \"https://gatekeeper-api.civic.com/\".concat(solanaVersionedEndpoint)\n};\nexport var getGatekeeperEndpoint = function getGatekeeperEndpoint(stage) {\n  var endpoint = GATEKEEPER_ENDPOINTS[stage];\n\n  if (!endpoint) {\n    throw new Error(\"Invalid stage \".concat(stage));\n  }\n\n  return endpoint;\n};\nexport var makeConfig = function makeConfig(clusterUrl) {\n  var cluster = urlToCluster(clusterUrl);\n  return {\n    cluster: cluster,\n    commitment: 'confirmed',\n    // this map instructs the POWO library to use clusterUrl\n    // to connect to the solana network. This avoids rate limiting issues with using the default\n    // public urls\n    supportedClusterUrls: _defineProperty({}, cluster, clusterUrl),\n    recentBlockCheck: false\n  };\n};","map":{"version":3,"sources":["C:/Test Mint/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/solana/config.js"],"names":["clusterApiUrl","clusterEndpoint","cluster","urlToCluster","clusterUrl","supportedClusters","matchedUrlCluster","find","matchedStringCluster","indexOf","solanaVersionedEndpoint","GATEKEEPER_ENDPOINTS","local","test","dev","preprod","prod","getGatekeeperEndpoint","stage","endpoint","Error","makeConfig","commitment","supportedClusterUrls","recentBlockCheck"],"mappings":";AAAA,SAASA,aAAT,QAA8B,iBAA9B;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD,EAAa;AACxC,UAAQA,OAAR;AACI,SAAK,UAAL;AACI,aAAO,uCAAP;;AACJ,SAAK,UAAL;AACI,aAAO,uBAAP;;AACJ;AACI,aAAOF,aAAa,CAACE,OAAD,CAApB;AANR;AAQH,CATM,C,CAUP;AACA;AACA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,UAAD,EAAgB;AACxC,MAAMC,iBAAiB,GAAG,CAAC,QAAD,EAAW,SAAX,EAAsB,cAAtB,EAAsC,UAAtC,EAAkD,UAAlD,CAA1B;AACA,MAAMC,iBAAiB,GAAGD,iBAAiB,CAACE,IAAlB,CAAuB,UAACL,OAAD;AAAA,WAAaD,eAAe,CAACC,OAAD,CAAf,KAA6BE,UAA1C;AAAA,GAAvB,CAA1B;AACA,MAAIE,iBAAJ,EACI,OAAOA,iBAAP;AACJ,MAAME,oBAAoB,GAAGH,iBAAiB,CAACE,IAAlB,CAAuB,UAACL,OAAD;AAAA,WAAaE,UAAU,CAACK,OAAX,CAAmBP,OAAnB,KAA+B,CAA5C;AAAA,GAAvB,CAA7B;AACA,MAAIM,oBAAJ,EACI,OAAOA,oBAAP;AACJ,SAAO,cAAP;AACH,CATM;AAUP,IAAME,uBAAuB,GAAG,iBAAhC;AACA,OAAO,IAAMC,oBAAoB,GAAG;AAChCC,EAAAA,KAAK,wCAAiCF,uBAAjC,CAD2B;AAEhCG,EAAAA,IAAI,wCAAiCH,uBAAjC,CAF4B;AAGhCI,EAAAA,GAAG,iDAA0CJ,uBAA1C,CAH6B;AAIhCK,EAAAA,OAAO,qDAA8CL,uBAA9C,CAJyB;AAKhCM,EAAAA,IAAI,6CAAsCN,uBAAtC;AAL4B,CAA7B;AAOP,OAAO,IAAMO,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,KAAD,EAAW;AAC5C,MAAMC,QAAQ,GAAGR,oBAAoB,CAACO,KAAD,CAArC;;AACA,MAAI,CAACC,QAAL,EAAe;AACX,UAAM,IAAIC,KAAJ,yBAA2BF,KAA3B,EAAN;AACH;;AACD,SAAOC,QAAP;AACH,CANM;AAOP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACjB,UAAD,EAAgB;AACtC,MAAMF,OAAO,GAAGC,YAAY,CAACC,UAAD,CAA5B;AACA,SAAO;AACHF,IAAAA,OAAO,EAAPA,OADG;AAEHoB,IAAAA,UAAU,EAAE,WAFT;AAGH;AACA;AACA;AACAC,IAAAA,oBAAoB,sBACfrB,OADe,EACLE,UADK,CANjB;AASHoB,IAAAA,gBAAgB,EAAE;AATf,GAAP;AAWH,CAbM","sourcesContent":["import { clusterApiUrl } from '@solana/web3.js';\nexport const clusterEndpoint = (cluster) => {\n    switch (cluster) {\n        case 'civicnet':\n            return 'https://d3ab7dlfud2b5u.cloudfront.net';\n        case 'localnet':\n            return 'http://localhost:8899';\n        default:\n            return clusterApiUrl(cluster);\n    }\n};\n// reverse lookup of cluster from url\n// note - this is a \"best-guess\" heuristic. If the client passes an unrecognised\n// url, default to mainnet\nexport const urlToCluster = (clusterUrl) => {\n    const supportedClusters = ['devnet', 'testnet', 'mainnet-beta', 'civicnet', 'localnet'];\n    const matchedUrlCluster = supportedClusters.find((cluster) => clusterEndpoint(cluster) === clusterUrl);\n    if (matchedUrlCluster)\n        return matchedUrlCluster;\n    const matchedStringCluster = supportedClusters.find((cluster) => clusterUrl.indexOf(cluster) >= 0);\n    if (matchedStringCluster)\n        return matchedStringCluster;\n    return 'mainnet-beta';\n};\nconst solanaVersionedEndpoint = 'v1/token/solana';\nexport const GATEKEEPER_ENDPOINTS = {\n    local: `http://localhost:3001/local/${solanaVersionedEndpoint}`,\n    test: `http://localhost:3001/local/${solanaVersionedEndpoint}`,\n    dev: `https://dev-gatekeeper-api.civic.com/${solanaVersionedEndpoint}`,\n    preprod: `https://preprod-gatekeeper-api.civic.com/${solanaVersionedEndpoint}`,\n    prod: `https://gatekeeper-api.civic.com/${solanaVersionedEndpoint}`,\n};\nexport const getGatekeeperEndpoint = (stage) => {\n    const endpoint = GATEKEEPER_ENDPOINTS[stage];\n    if (!endpoint) {\n        throw new Error(`Invalid stage ${stage}`);\n    }\n    return endpoint;\n};\nexport const makeConfig = (clusterUrl) => {\n    const cluster = urlToCluster(clusterUrl);\n    return {\n        cluster,\n        commitment: 'confirmed',\n        // this map instructs the POWO library to use clusterUrl\n        // to connect to the solana network. This avoids rate limiting issues with using the default\n        // public urls\n        supportedClusterUrls: {\n            [cluster]: clusterUrl,\n        },\n        recentBlockCheck: false,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}