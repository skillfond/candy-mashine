{"ast":null,"code":"import { GatewayStatus, TokenIssuanceState, CivicPassIssuanceStatus, State, GatekeeperRecordState } from '../types'; // eslint-disable-next-line import/prefer-default-export\n\nexport const resetState = state => Object.assign(Object.assign({}, state), {\n  gatewayStatus: GatewayStatus.UNKNOWN,\n  tokenRequested: false,\n  iframeMinimized: false,\n  firstTokenCheck: true,\n  renderIframe: false,\n  gatewayToken: undefined,\n  powoRequested: undefined,\n  refreshIntervalId: undefined,\n  powoFinished: false,\n  refreshInProgress: false,\n  tokenIssuanceState: TokenIssuanceState.NOT_REQUESTED,\n  walletToRefresh: undefined,\n  walletPowoInProgress: false,\n  gatekeeperRecordState: undefined,\n  civicPass: {\n    status: CivicPassIssuanceStatus.NOT_REQUESTED,\n    iframeMinimized: false,\n    renderIframe: false\n  }\n});\n\nconst hasExpired = gatewayToken => {\n  const now = Math.floor(Date.now() / 1000);\n  return !!gatewayToken.expiryTime && now >= gatewayToken.expiryTime;\n};\n\nconst isLocationNotSupported = recordState => {\n  if (!recordState) return false;\n  return [GatekeeperRecordState.LOCATION_NOT_SUPPORTED].includes(recordState);\n};\n\nconst isIssuedLocationNotSupported = recordState => {\n  if (!recordState) return false;\n  return [GatekeeperRecordState.ISSUED_LOCATION_NOT_SUPPORTED].includes(recordState);\n};\n\nexport const statusFromToken = (state, gatewayToken) => {\n  if (!gatewayToken) return state.gatewayStatus;\n\n  switch (gatewayToken.state) {\n    case State.ACTIVE:\n      if (isLocationNotSupported(state.gatekeeperRecordState)) {\n        return GatewayStatus.LOCATION_NOT_SUPPORTED;\n      }\n\n      if (isIssuedLocationNotSupported(state.gatekeeperRecordState)) {\n        return GatewayStatus.REFRESH_TOKEN_REQUIRED;\n      }\n\n      if (state.gatewayStatus === GatewayStatus.PROOF_OF_WALLET_OWNERSHIP) {\n        return GatewayStatus.PROOF_OF_WALLET_OWNERSHIP;\n      }\n\n      return hasExpired(gatewayToken) ? GatewayStatus.REFRESH_TOKEN_REQUIRED : GatewayStatus.ACTIVE;\n\n    case State.REVOKED:\n      return GatewayStatus.REVOKED;\n\n    case State.FROZEN:\n      return GatewayStatus.FROZEN;\n\n    default:\n      return GatewayStatus.UNKNOWN;\n  }\n};","map":{"version":3,"sources":["F:/SitePortfolio/skillfond/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/useReducer/utils.js"],"names":["GatewayStatus","TokenIssuanceState","CivicPassIssuanceStatus","State","GatekeeperRecordState","resetState","state","Object","assign","gatewayStatus","UNKNOWN","tokenRequested","iframeMinimized","firstTokenCheck","renderIframe","gatewayToken","undefined","powoRequested","refreshIntervalId","powoFinished","refreshInProgress","tokenIssuanceState","NOT_REQUESTED","walletToRefresh","walletPowoInProgress","gatekeeperRecordState","civicPass","status","hasExpired","now","Math","floor","Date","expiryTime","isLocationNotSupported","recordState","LOCATION_NOT_SUPPORTED","includes","isIssuedLocationNotSupported","ISSUED_LOCATION_NOT_SUPPORTED","statusFromToken","ACTIVE","REFRESH_TOKEN_REQUIRED","PROOF_OF_WALLET_OWNERSHIP","REVOKED","FROZEN"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,kBAAxB,EAA4CC,uBAA5C,EAAqEC,KAArE,EAA4EC,qBAA5E,QAA0G,UAA1G,C,CACA;;AACA,OAAO,MAAMC,UAAU,GAAIC,KAAD,IAAYC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,KAAlB,CAAd,EAAwC;AAAEG,EAAAA,aAAa,EAAET,aAAa,CAACU,OAA/B;AAAwCC,EAAAA,cAAc,EAAE,KAAxD;AAA+DC,EAAAA,eAAe,EAAE,KAAhF;AAAuFC,EAAAA,eAAe,EAAE,IAAxG;AAA8GC,EAAAA,YAAY,EAAE,KAA5H;AAAmIC,EAAAA,YAAY,EAAEC,SAAjJ;AAA4JC,EAAAA,aAAa,EAAED,SAA3K;AAAsLE,EAAAA,iBAAiB,EAAEF,SAAzM;AAAoNG,EAAAA,YAAY,EAAE,KAAlO;AAAyOC,EAAAA,iBAAiB,EAAE,KAA5P;AAAmQC,EAAAA,kBAAkB,EAAEpB,kBAAkB,CAACqB,aAA1S;AAAyTC,EAAAA,eAAe,EAAEP,SAA1U;AAAqVQ,EAAAA,oBAAoB,EAAE,KAA3W;AAAkXC,EAAAA,qBAAqB,EAAET,SAAzY;AAAoZU,EAAAA,SAAS,EAAE;AACreC,IAAAA,MAAM,EAAEzB,uBAAuB,CAACoB,aADqc;AAEreV,IAAAA,eAAe,EAAE,KAFod;AAGreE,IAAAA,YAAY,EAAE;AAHud;AAA/Z,CAAxC,CAA/B;;AAKP,MAAMc,UAAU,GAAIb,YAAD,IAAkB;AACjC,QAAMc,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACH,GAAL,KAAa,IAAxB,CAAZ;AACA,SAAO,CAAC,CAACd,YAAY,CAACkB,UAAf,IAA6BJ,GAAG,IAAId,YAAY,CAACkB,UAAxD;AACH,CAHD;;AAIA,MAAMC,sBAAsB,GAAIC,WAAD,IAAiB;AAC5C,MAAI,CAACA,WAAL,EACI,OAAO,KAAP;AACJ,SAAO,CAAC/B,qBAAqB,CAACgC,sBAAvB,EAA+CC,QAA/C,CAAwDF,WAAxD,CAAP;AACH,CAJD;;AAKA,MAAMG,4BAA4B,GAAIH,WAAD,IAAiB;AAClD,MAAI,CAACA,WAAL,EACI,OAAO,KAAP;AACJ,SAAO,CAAC/B,qBAAqB,CAACmC,6BAAvB,EAAsDF,QAAtD,CAA+DF,WAA/D,CAAP;AACH,CAJD;;AAKA,OAAO,MAAMK,eAAe,GAAG,CAAClC,KAAD,EAAQS,YAAR,KAAyB;AACpD,MAAI,CAACA,YAAL,EACI,OAAOT,KAAK,CAACG,aAAb;;AACJ,UAAQM,YAAY,CAACT,KAArB;AACI,SAAKH,KAAK,CAACsC,MAAX;AACI,UAAIP,sBAAsB,CAAC5B,KAAK,CAACmB,qBAAP,CAA1B,EAAyD;AACrD,eAAOzB,aAAa,CAACoC,sBAArB;AACH;;AACD,UAAIE,4BAA4B,CAAChC,KAAK,CAACmB,qBAAP,CAAhC,EAA+D;AAC3D,eAAOzB,aAAa,CAAC0C,sBAArB;AACH;;AACD,UAAIpC,KAAK,CAACG,aAAN,KAAwBT,aAAa,CAAC2C,yBAA1C,EAAqE;AACjE,eAAO3C,aAAa,CAAC2C,yBAArB;AACH;;AACD,aAAOf,UAAU,CAACb,YAAD,CAAV,GAA2Bf,aAAa,CAAC0C,sBAAzC,GAAkE1C,aAAa,CAACyC,MAAvF;;AACJ,SAAKtC,KAAK,CAACyC,OAAX;AACI,aAAO5C,aAAa,CAAC4C,OAArB;;AACJ,SAAKzC,KAAK,CAAC0C,MAAX;AACI,aAAO7C,aAAa,CAAC6C,MAArB;;AACJ;AACI,aAAO7C,aAAa,CAACU,OAArB;AAjBR;AAmBH,CAtBM","sourcesContent":["import { GatewayStatus, TokenIssuanceState, CivicPassIssuanceStatus, State, GatekeeperRecordState, } from '../types';\n// eslint-disable-next-line import/prefer-default-export\nexport const resetState = (state) => (Object.assign(Object.assign({}, state), { gatewayStatus: GatewayStatus.UNKNOWN, tokenRequested: false, iframeMinimized: false, firstTokenCheck: true, renderIframe: false, gatewayToken: undefined, powoRequested: undefined, refreshIntervalId: undefined, powoFinished: false, refreshInProgress: false, tokenIssuanceState: TokenIssuanceState.NOT_REQUESTED, walletToRefresh: undefined, walletPowoInProgress: false, gatekeeperRecordState: undefined, civicPass: {\n        status: CivicPassIssuanceStatus.NOT_REQUESTED,\n        iframeMinimized: false,\n        renderIframe: false,\n    } }));\nconst hasExpired = (gatewayToken) => {\n    const now = Math.floor(Date.now() / 1000);\n    return !!gatewayToken.expiryTime && now >= gatewayToken.expiryTime;\n};\nconst isLocationNotSupported = (recordState) => {\n    if (!recordState)\n        return false;\n    return [GatekeeperRecordState.LOCATION_NOT_SUPPORTED].includes(recordState);\n};\nconst isIssuedLocationNotSupported = (recordState) => {\n    if (!recordState)\n        return false;\n    return [GatekeeperRecordState.ISSUED_LOCATION_NOT_SUPPORTED].includes(recordState);\n};\nexport const statusFromToken = (state, gatewayToken) => {\n    if (!gatewayToken)\n        return state.gatewayStatus;\n    switch (gatewayToken.state) {\n        case State.ACTIVE:\n            if (isLocationNotSupported(state.gatekeeperRecordState)) {\n                return GatewayStatus.LOCATION_NOT_SUPPORTED;\n            }\n            if (isIssuedLocationNotSupported(state.gatekeeperRecordState)) {\n                return GatewayStatus.REFRESH_TOKEN_REQUIRED;\n            }\n            if (state.gatewayStatus === GatewayStatus.PROOF_OF_WALLET_OWNERSHIP) {\n                return GatewayStatus.PROOF_OF_WALLET_OWNERSHIP;\n            }\n            return hasExpired(gatewayToken) ? GatewayStatus.REFRESH_TOKEN_REQUIRED : GatewayStatus.ACTIVE;\n        case State.REVOKED:\n            return GatewayStatus.REVOKED;\n        case State.FROZEN:\n            return GatewayStatus.FROZEN;\n        default:\n            return GatewayStatus.UNKNOWN;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}