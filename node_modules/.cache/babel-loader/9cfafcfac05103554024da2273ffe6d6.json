{"ast":null,"code":"import _slicedToArray from \"C:\\\\Test Mint\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\nimport _asyncToGenerator from \"C:\\\\Test Mint\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _regeneratorRuntime from \"C:\\\\Test Mint\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport React, { useContext, useEffect, useReducer, useState, useCallback } from 'react';\nimport IframeResizer from 'iframe-resizer-react';\nimport { GatewayStatus, TokenIssuanceState, CivicPassIssuanceStatus, RefreshTokenState } from '../types';\nimport logger from '../logger';\nimport { Wrapper } from '../wrapper/Wrapper';\nimport { IFRAME_ID, TESTID_IFRAME, TESTID_WRAPPER, TESTID_WRAPPER_CONTAINER } from '../constants';\nimport { DEFAULT_GATEKEEPER_STAGE, getCivicPassEndpoint } from '../config';\nimport { getGatekeeperEndpoint } from '../solana/config';\nimport GatekeeperClient from '../utils/gatekeeperClient';\nimport reducer from '../useReducer';\nimport useUserInteraction from '../useHooks/useUserInteraction';\nimport useOrchestration from '../useHooks/useOrchestration';\nimport useCivicPass from '../useHooks/useCivicPass';\nimport useWalletHooks from '../useHooks/useWalletHooks';\nimport useCivicPassEventListener from '../useHooks/useCivicPassEventListener';\nvar GatewayContext = React.createContext({\n  requestGatewayToken: function () {\n    var _requestGatewayToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function requestGatewayToken() {\n      return _requestGatewayToken.apply(this, arguments);\n    }\n\n    return requestGatewayToken;\n  }(),\n  gatewayStatus: GatewayStatus.NOT_REQUESTED,\n  stage: DEFAULT_GATEKEEPER_STAGE\n});\n\nvar redirectUrlFromWindow = function redirectUrlFromWindow() {\n  return encodeURIComponent(window.location.href.split('?')[0]);\n};\n\nexport var GatewayProvider = function GatewayProvider(_ref) {\n  var _ref$children = _ref.children,\n      children = _ref$children === void 0 ? null : _ref$children,\n      wallet = _ref.wallet,\n      chainImplementation = _ref.chainImplementation,\n      wrapper = _ref.wrapper,\n      logo = _ref.logo,\n      _ref$stage = _ref.stage,\n      stage = _ref$stage === void 0 ? 'prod' : _ref$stage,\n      redirectUrl = _ref.redirectUrl,\n      gatekeeperNetwork = _ref.gatekeeperNetwork,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {\n    autoShowModal: true\n  } : _ref$options;\n  var gatekeeperNetworkAddress = gatekeeperNetwork;\n\n  var _useReducer = useReducer(reducer, {\n    options: options,\n    gatewayStatus: GatewayStatus.UNKNOWN,\n    tokenRequested: false,\n    iframeMinimized: false,\n    firstTokenCheck: true,\n    renderIframe: false,\n    powoFinished: false,\n    refreshInProgress: false,\n    walletPowoInProgress: false,\n    walletAddress: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey,\n    iframeSrcUrl: undefined,\n    stage: stage,\n    redirectUrl: redirectUrl || redirectUrlFromWindow(),\n    tokenIssuanceState: TokenIssuanceState.NOT_REQUESTED,\n    refreshTokenState: RefreshTokenState.NOT_REQUIRED,\n    civicPass: {\n      status: CivicPassIssuanceStatus.NOT_REQUESTED,\n      iframeMinimized: false,\n      renderIframe: false\n    },\n    gatekeeperNetworkAddress: gatekeeperNetworkAddress,\n    chainType: chainImplementation.chainType\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var gatewayStatus = state.gatewayStatus,\n      iframeMinimized = state.iframeMinimized,\n      renderIframe = state.renderIframe,\n      gatewayToken = state.gatewayToken,\n      iframeSrcUrl = state.iframeSrcUrl;\n  useWalletHooks(wallet, state, dispatch); // need to handle wallet connect and disconnect first\n  // ensure the state is updated with any changes to input props\n\n  useEffect(function () {\n    dispatch({\n      type: 'updateStateWithProps',\n      redirectUrl: redirectUrl || redirectUrlFromWindow(),\n      stage: stage,\n      walletAddress: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey,\n      gatekeeperNetworkAddress: gatekeeperNetworkAddress\n    });\n  }, [redirectUrl, stage, wallet, gatekeeperNetworkAddress]);\n  var clusterName = chainImplementation.httpConfig.queryParams.network;\n  var gatekeeperEndpoint = getGatekeeperEndpoint(stage);\n  var gatekeeperClient = useCallback(function () {\n    if (!gatekeeperNetworkAddress) {\n      throw new Error('No gatekeeper network passed in.');\n    }\n\n    return new GatekeeperClient({\n      baseUrl: gatekeeperEndpoint,\n      stage: stage,\n      queryParams: {\n        network: clusterName,\n        gatekeeperNetworkAddress: gatekeeperNetworkAddress\n      }\n    });\n  }, [stage, gatekeeperEndpoint, gatekeeperNetworkAddress, clusterName]); // listen and act on events from the compliance iframe\n\n  useCivicPass({\n    wallet: wallet\n  }, state, dispatch);\n  useCivicPassEventListener({\n    wallet: wallet,\n    chainImplementation: chainImplementation\n  }); // this hook implements the main business logic and handles requesting and refreshing gateway tokens\n\n  useOrchestration({\n    wallet: wallet,\n    chainImplementation: chainImplementation,\n    stage: stage,\n    gatekeeperClient: gatekeeperClient\n  }, state, dispatch); // requestGatewayToken is the only user-triggered event handled by the component\n  // the compliance iframe user interaction is handled using events triggered from the iframe\n\n  var _useUserInteraction = useUserInteraction({\n    wallet: wallet\n  }, state, dispatch),\n      requestGatewayToken = _useUserInteraction.requestGatewayToken;\n\n  var civicPassSrcUrl = getCivicPassEndpoint(stage);\n  /**\n   * manage local state for display of the close button ui relative to iframe loading\n   */\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      iframeLoaded = _useState2[0],\n      setIframeLoaded = _useState2[1];\n\n  useEffect(function () {\n    logger.info('GatewayContext gatewayStatus', GatewayStatus[gatewayStatus]);\n  }, [gatewayStatus]);\n  /**\n   * Reset the iFrame when removing the iFrame from the DOM\n   */\n\n  useEffect(function () {\n    if (!renderIframe) {\n      setIframeLoaded(false);\n    }\n  }, [renderIframe]);\n  return React.createElement(GatewayContext.Provider, {\n    value: {\n      requestGatewayToken: requestGatewayToken,\n      gatewayStatus: gatewayStatus,\n      gatewayToken: gatewayStatus === GatewayStatus.ACTIVE ? gatewayToken : undefined,\n      stage: stage,\n      civicPassSrcUrl: civicPassSrcUrl\n    }\n  }, children, renderIframe && React.createElement(\"div\", {\n    \"data-testid\": TESTID_WRAPPER_CONTAINER,\n    hidden: iframeMinimized\n  }, React.createElement(Wrapper, {\n    \"data-testid\": TESTID_WRAPPER,\n    onClose: function onClose() {\n      return dispatch({\n        type: 'civicPass_close'\n      });\n    },\n    wrapper: wrapper,\n    logo: logo,\n    loaded: iframeLoaded\n  }, React.createElement(IframeResizer, {\n    \"data-testid\": TESTID_IFRAME,\n    src: iframeSrcUrl,\n    id: IFRAME_ID,\n    style: {\n      width: '1px',\n      minWidth: '100%',\n      border: 'none',\n      height: '26px',\n      transition: 'height 0.25s ease'\n    },\n    heightCalculationMethod: \"min\",\n    checkOrigin: false,\n    onLoad: function onLoad() {\n      return setIframeLoaded(true);\n    },\n    inPageLinks: true,\n    allow: \"camera\",\n    allowFullScreen: true,\n    frameBorder: \"0\"\n  }))));\n};\nexport var useGateway = function useGateway() {\n  return useContext(GatewayContext);\n};","map":{"version":3,"sources":["C:/Test Mint/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/gateway/GatewayContext.js"],"names":["React","useContext","useEffect","useReducer","useState","useCallback","IframeResizer","GatewayStatus","TokenIssuanceState","CivicPassIssuanceStatus","RefreshTokenState","logger","Wrapper","IFRAME_ID","TESTID_IFRAME","TESTID_WRAPPER","TESTID_WRAPPER_CONTAINER","DEFAULT_GATEKEEPER_STAGE","getCivicPassEndpoint","getGatekeeperEndpoint","GatekeeperClient","reducer","useUserInteraction","useOrchestration","useCivicPass","useWalletHooks","useCivicPassEventListener","GatewayContext","createContext","requestGatewayToken","gatewayStatus","NOT_REQUESTED","stage","redirectUrlFromWindow","encodeURIComponent","window","location","href","split","GatewayProvider","children","wallet","chainImplementation","wrapper","logo","redirectUrl","gatekeeperNetwork","options","autoShowModal","gatekeeperNetworkAddress","UNKNOWN","tokenRequested","iframeMinimized","firstTokenCheck","renderIframe","powoFinished","refreshInProgress","walletPowoInProgress","walletAddress","publicKey","iframeSrcUrl","undefined","tokenIssuanceState","refreshTokenState","NOT_REQUIRED","civicPass","status","chainType","state","dispatch","gatewayToken","type","clusterName","httpConfig","queryParams","network","gatekeeperEndpoint","gatekeeperClient","Error","baseUrl","civicPassSrcUrl","iframeLoaded","setIframeLoaded","info","createElement","Provider","value","ACTIVE","hidden","onClose","loaded","src","id","style","width","minWidth","border","height","transition","heightCalculationMethod","checkOrigin","onLoad","inPageLinks","allow","allowFullScreen","frameBorder","useGateway"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useReducer, useState, useCallback } from 'react';\nimport IframeResizer from 'iframe-resizer-react';\nimport { GatewayStatus, TokenIssuanceState, CivicPassIssuanceStatus, RefreshTokenState, } from '../types';\nimport logger from '../logger';\nimport { Wrapper } from '../wrapper/Wrapper';\nimport { IFRAME_ID, TESTID_IFRAME, TESTID_WRAPPER, TESTID_WRAPPER_CONTAINER } from '../constants';\nimport { DEFAULT_GATEKEEPER_STAGE, getCivicPassEndpoint } from '../config';\nimport { getGatekeeperEndpoint } from '../solana/config';\nimport GatekeeperClient from '../utils/gatekeeperClient';\nimport reducer from '../useReducer';\nimport useUserInteraction from '../useHooks/useUserInteraction';\nimport useOrchestration from '../useHooks/useOrchestration';\nimport useCivicPass from '../useHooks/useCivicPass';\nimport useWalletHooks from '../useHooks/useWalletHooks';\nimport useCivicPassEventListener from '../useHooks/useCivicPassEventListener';\nconst GatewayContext = React.createContext({\n    requestGatewayToken: async () => { },\n    gatewayStatus: GatewayStatus.NOT_REQUESTED,\n    stage: DEFAULT_GATEKEEPER_STAGE,\n});\nconst redirectUrlFromWindow = () => encodeURIComponent(window.location.href.split('?')[0]);\nexport const GatewayProvider = ({ children = null, wallet, chainImplementation, wrapper, logo, stage = 'prod', redirectUrl, gatekeeperNetwork, options = { autoShowModal: true }, }) => {\n    const gatekeeperNetworkAddress = gatekeeperNetwork;\n    const [state, dispatch] = useReducer(reducer, {\n        options,\n        gatewayStatus: GatewayStatus.UNKNOWN,\n        tokenRequested: false,\n        iframeMinimized: false,\n        firstTokenCheck: true,\n        renderIframe: false,\n        powoFinished: false,\n        refreshInProgress: false,\n        walletPowoInProgress: false,\n        walletAddress: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey,\n        iframeSrcUrl: undefined,\n        stage,\n        redirectUrl: redirectUrl || redirectUrlFromWindow(),\n        tokenIssuanceState: TokenIssuanceState.NOT_REQUESTED,\n        refreshTokenState: RefreshTokenState.NOT_REQUIRED,\n        civicPass: {\n            status: CivicPassIssuanceStatus.NOT_REQUESTED,\n            iframeMinimized: false,\n            renderIframe: false,\n        },\n        gatekeeperNetworkAddress,\n        chainType: chainImplementation.chainType,\n    });\n    const { gatewayStatus, iframeMinimized, renderIframe, gatewayToken, iframeSrcUrl } = state;\n    useWalletHooks(wallet, state, dispatch); // need to handle wallet connect and disconnect first\n    // ensure the state is updated with any changes to input props\n    useEffect(() => {\n        dispatch({\n            type: 'updateStateWithProps',\n            redirectUrl: redirectUrl || redirectUrlFromWindow(),\n            stage,\n            walletAddress: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey,\n            gatekeeperNetworkAddress,\n        });\n    }, [redirectUrl, stage, wallet, gatekeeperNetworkAddress]);\n    const clusterName = chainImplementation.httpConfig.queryParams.network;\n    const gatekeeperEndpoint = getGatekeeperEndpoint(stage);\n    const gatekeeperClient = useCallback(() => {\n        if (!gatekeeperNetworkAddress) {\n            throw new Error('No gatekeeper network passed in.');\n        }\n        return new GatekeeperClient({\n            baseUrl: gatekeeperEndpoint,\n            stage,\n            queryParams: { network: clusterName, gatekeeperNetworkAddress },\n        });\n    }, [stage, gatekeeperEndpoint, gatekeeperNetworkAddress, clusterName]);\n    // listen and act on events from the compliance iframe\n    useCivicPass({ wallet }, state, dispatch);\n    useCivicPassEventListener({ wallet, chainImplementation });\n    // this hook implements the main business logic and handles requesting and refreshing gateway tokens\n    useOrchestration({ wallet, chainImplementation, stage, gatekeeperClient }, state, dispatch);\n    // requestGatewayToken is the only user-triggered event handled by the component\n    // the compliance iframe user interaction is handled using events triggered from the iframe\n    const { requestGatewayToken } = useUserInteraction({ wallet }, state, dispatch);\n    const civicPassSrcUrl = getCivicPassEndpoint(stage);\n    /**\n     * manage local state for display of the close button ui relative to iframe loading\n     */\n    const [iframeLoaded, setIframeLoaded] = useState(false);\n    useEffect(() => {\n        logger.info('GatewayContext gatewayStatus', GatewayStatus[gatewayStatus]);\n    }, [gatewayStatus]);\n    /**\n     * Reset the iFrame when removing the iFrame from the DOM\n     */\n    useEffect(() => {\n        if (!renderIframe) {\n            setIframeLoaded(false);\n        }\n    }, [renderIframe]);\n    return (React.createElement(GatewayContext.Provider, { value: {\n            requestGatewayToken,\n            gatewayStatus,\n            gatewayToken: gatewayStatus === GatewayStatus.ACTIVE ? gatewayToken : undefined,\n            stage,\n            civicPassSrcUrl,\n        } },\n        children,\n        renderIframe && (React.createElement(\"div\", { \"data-testid\": TESTID_WRAPPER_CONTAINER, hidden: iframeMinimized },\n            React.createElement(Wrapper, { \"data-testid\": TESTID_WRAPPER, onClose: () => dispatch({ type: 'civicPass_close' }), wrapper: wrapper, logo: logo, loaded: iframeLoaded },\n                React.createElement(IframeResizer, { \"data-testid\": TESTID_IFRAME, src: iframeSrcUrl, id: IFRAME_ID, style: {\n                        width: '1px',\n                        minWidth: '100%',\n                        border: 'none',\n                        height: '26px',\n                        transition: 'height 0.25s ease',\n                    }, heightCalculationMethod: \"min\", checkOrigin: false, onLoad: () => setIframeLoaded(true), inPageLinks: true, allow: \"camera\", allowFullScreen: true, frameBorder: \"0\" }))))));\n};\nexport const useGateway = () => useContext(GatewayContext);\n"]},"metadata":{},"sourceType":"module"}