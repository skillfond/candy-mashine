{"ast":null,"code":"import { State } from '@identity.com/solana-gateway-ts';\nimport logger from '../logger';\nimport { pollUntilConditionMet } from './utils';\n\nconst pollForActiveOnChainToken = async chainImplementation => {\n  return pollUntilConditionMet(chainImplementation.findGatewayToken, onChainToken => {\n    if (!onChainToken) return false; // keep polling\n\n    if (onChainToken.state === State.ACTIVE) return true;\n    throw new Error('Token found but not ACTIVE');\n  }, 2000, // wait 2 seconds between retries\n  20 // poll 20 times\n  );\n};\n\nconst GatewayTokenActionCreatorImplementation = _ref => {\n  let {\n    wallet,\n    chainImplementation,\n    gatekeeperClient,\n    dispatch\n  } = _ref;\n\n  const logDebug = function (message) {\n    let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return logger.debug(`[useChain] ${message}`, obj);\n  };\n\n  const logError = function (message) {\n    let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return logger.error(`[useChain] ${message}`, obj);\n  };\n\n  const isTokenCreated = code => code === 200;\n\n  const isTokenPending = code => code === 202 || code === 404;\n\n  const isFailure = code => !isTokenPending(code) && code >= 400;\n\n  const waitForGatewayToken = async () => {\n    // poll the gatekeeper until we have a status for a created record\n    // if we don't get a created token, then we consider it a failure\n    const code = await gatekeeperClient().pollGatekeeperStatus(wallet.publicKey);\n\n    if (isTokenCreated(code)) {\n      const token = await pollForActiveOnChainToken(chainImplementation);\n      logDebug('Result from pollForActiveOnChainToken', token);\n\n      if (!token) {\n        logError(`Token not found onChain: ${code}`);\n        throw new Error(`Token not found onChain: ${code}`);\n      }\n\n      dispatch({\n        type: 'tokenChange',\n        token\n      });\n      dispatch({\n        type: 'civicPass_check_token_status',\n        token\n      });\n      return;\n    } // retries have been exhausted and we still don't have a token\n    // or the gatekeeper threw an error during issuance attempt\n\n\n    if (isTokenPending(code) || isFailure(code)) {\n      logError('Failed to find Gateway token', code);\n      dispatch({\n        type: 'gatekeeperError'\n      });\n      return;\n    }\n\n    throw new Error(`setTokenIfCreatedStatus error: ${code}`);\n  };\n\n  return {\n    waitForGatewayToken\n  };\n};\n\nexport { GatewayTokenActionCreatorImplementation };","map":{"version":3,"sources":["F:/SitePortfolio/skillfond/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/actionCreator/gatewayToken.actionCreator.js"],"names":["State","logger","pollUntilConditionMet","pollForActiveOnChainToken","chainImplementation","findGatewayToken","onChainToken","state","ACTIVE","Error","GatewayTokenActionCreatorImplementation","wallet","gatekeeperClient","dispatch","logDebug","message","obj","debug","logError","error","isTokenCreated","code","isTokenPending","isFailure","waitForGatewayToken","pollGatekeeperStatus","publicKey","token","type"],"mappings":"AAAA,SAASA,KAAT,QAAsB,iCAAtB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,qBAAT,QAAsC,SAAtC;;AACA,MAAMC,yBAAyB,GAAG,MAAOC,mBAAP,IAA+B;AAC7D,SAAOF,qBAAqB,CAACE,mBAAmB,CAACC,gBAArB,EAAwCC,YAAD,IAAkB;AACjF,QAAI,CAACA,YAAL,EACI,OAAO,KAAP,CAF6E,CAE/D;;AAClB,QAAIA,YAAY,CAACC,KAAb,KAAuBP,KAAK,CAACQ,MAAjC,EACI,OAAO,IAAP;AACJ,UAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACH,GAN2B,EAMzB,IANyB,EAMnB;AACT,IAP4B,CAOzB;AAPyB,GAA5B;AASH,CAVD;;AAWA,MAAMC,uCAAuC,GAAG,QAAkE;AAAA,MAAjE;AAAEC,IAAAA,MAAF;AAAUP,IAAAA,mBAAV;AAA+BQ,IAAAA,gBAA/B;AAAiDC,IAAAA;AAAjD,GAAiE;;AAC9G,QAAMC,QAAQ,GAAG,UAACC,OAAD;AAAA,QAAUC,GAAV,uEAAgB,IAAhB;AAAA,WAAyBf,MAAM,CAACgB,KAAP,CAAc,cAAaF,OAAQ,EAAnC,EAAsCC,GAAtC,CAAzB;AAAA,GAAjB;;AACA,QAAME,QAAQ,GAAG,UAACH,OAAD;AAAA,QAAUC,GAAV,uEAAgB,IAAhB;AAAA,WAAyBf,MAAM,CAACkB,KAAP,CAAc,cAAaJ,OAAQ,EAAnC,EAAsCC,GAAtC,CAAzB;AAAA,GAAjB;;AACA,QAAMI,cAAc,GAAIC,IAAD,IAAUA,IAAI,KAAK,GAA1C;;AACA,QAAMC,cAAc,GAAID,IAAD,IAAUA,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,GAA1D;;AACA,QAAME,SAAS,GAAIF,IAAD,IAAU,CAACC,cAAc,CAACD,IAAD,CAAf,IAAyBA,IAAI,IAAI,GAA7D;;AACA,QAAMG,mBAAmB,GAAG,YAAY;AACpC;AACA;AACA,UAAMH,IAAI,GAAG,MAAMT,gBAAgB,GAAGa,oBAAnB,CAAwCd,MAAM,CAACe,SAA/C,CAAnB;;AACA,QAAIN,cAAc,CAACC,IAAD,CAAlB,EAA0B;AACtB,YAAMM,KAAK,GAAG,MAAMxB,yBAAyB,CAACC,mBAAD,CAA7C;AACAU,MAAAA,QAAQ,CAAC,uCAAD,EAA0Ca,KAA1C,CAAR;;AACA,UAAI,CAACA,KAAL,EAAY;AACRT,QAAAA,QAAQ,CAAE,4BAA2BG,IAAK,EAAlC,CAAR;AACA,cAAM,IAAIZ,KAAJ,CAAW,4BAA2BY,IAAK,EAA3C,CAAN;AACH;;AACDR,MAAAA,QAAQ,CAAC;AAAEe,QAAAA,IAAI,EAAE,aAAR;AAAuBD,QAAAA;AAAvB,OAAD,CAAR;AACAd,MAAAA,QAAQ,CAAC;AAAEe,QAAAA,IAAI,EAAE,8BAAR;AAAwCD,QAAAA;AAAxC,OAAD,CAAR;AACA;AACH,KAdmC,CAepC;AACA;;;AACA,QAAIL,cAAc,CAACD,IAAD,CAAd,IAAwBE,SAAS,CAACF,IAAD,CAArC,EAA6C;AACzCH,MAAAA,QAAQ,CAAC,8BAAD,EAAiCG,IAAjC,CAAR;AACAR,MAAAA,QAAQ,CAAC;AAAEe,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACA;AACH;;AACD,UAAM,IAAInB,KAAJ,CAAW,kCAAiCY,IAAK,EAAjD,CAAN;AACH,GAvBD;;AAwBA,SAAO;AAAEG,IAAAA;AAAF,GAAP;AACH,CA/BD;;AAgCA,SAASd,uCAAT","sourcesContent":["import { State } from '@identity.com/solana-gateway-ts';\nimport logger from '../logger';\nimport { pollUntilConditionMet } from './utils';\nconst pollForActiveOnChainToken = async (chainImplementation) => {\n    return pollUntilConditionMet(chainImplementation.findGatewayToken, (onChainToken) => {\n        if (!onChainToken)\n            return false; // keep polling\n        if (onChainToken.state === State.ACTIVE)\n            return true;\n        throw new Error('Token found but not ACTIVE');\n    }, 2000, // wait 2 seconds between retries\n    20 // poll 20 times\n    );\n};\nconst GatewayTokenActionCreatorImplementation = ({ wallet, chainImplementation, gatekeeperClient, dispatch, }) => {\n    const logDebug = (message, obj = null) => logger.debug(`[useChain] ${message}`, obj);\n    const logError = (message, obj = null) => logger.error(`[useChain] ${message}`, obj);\n    const isTokenCreated = (code) => code === 200;\n    const isTokenPending = (code) => code === 202 || code === 404;\n    const isFailure = (code) => !isTokenPending(code) && code >= 400;\n    const waitForGatewayToken = async () => {\n        // poll the gatekeeper until we have a status for a created record\n        // if we don't get a created token, then we consider it a failure\n        const code = await gatekeeperClient().pollGatekeeperStatus(wallet.publicKey);\n        if (isTokenCreated(code)) {\n            const token = await pollForActiveOnChainToken(chainImplementation);\n            logDebug('Result from pollForActiveOnChainToken', token);\n            if (!token) {\n                logError(`Token not found onChain: ${code}`);\n                throw new Error(`Token not found onChain: ${code}`);\n            }\n            dispatch({ type: 'tokenChange', token });\n            dispatch({ type: 'civicPass_check_token_status', token });\n            return;\n        }\n        // retries have been exhausted and we still don't have a token\n        // or the gatekeeper threw an error during issuance attempt\n        if (isTokenPending(code) || isFailure(code)) {\n            logError('Failed to find Gateway token', code);\n            dispatch({ type: 'gatekeeperError' });\n            return;\n        }\n        throw new Error(`setTokenIfCreatedStatus error: ${code}`);\n    };\n    return { waitForGatewayToken };\n};\nexport { GatewayTokenActionCreatorImplementation };\n"]},"metadata":{},"sourceType":"module"}