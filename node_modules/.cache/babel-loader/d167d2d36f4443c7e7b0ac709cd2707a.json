{"ast":null,"code":"import { useCallback } from 'react';\nimport logger from '../logger';\nimport useWalletHooks from './useWalletHooks';\n\nconst usePowo = (_ref, state, dispatch) => {\n  let {\n    wallet,\n    chainImplementation\n  } = _ref;\n  const {\n    powoFinished,\n    walletPowoInProgress,\n    refreshInProgress\n  } = state;\n  const {\n    expectWalletConnected\n  } = useWalletHooks(wallet, state, dispatch);\n  /**\n   * wait until the user has confirmed they want to continue the proof of wallet ownership flow\n   * then resolve the promise\n   */\n\n  const waitForConfirmPOWO = useCallback( // eslint-disable-next-line @typescript-eslint/no-shadow\n  async payload => {\n    logger.debug('usePowo waitForConfirmPOWO before expectWalletConnected', {\n      payload\n    });\n    expectWalletConnected();\n    return new Promise(resolve => {\n      logger.debug('usePowo waitForConfirmPOWO', {\n        powoFinished\n      });\n\n      if (powoFinished) {\n        resolve(payload);\n      }\n    });\n  }, [powoFinished, expectWalletConnected]);\n  /**\n   * wait until the user has provided proof of wallet ownership using their connected wallet\n   * if this was triggered from the refresh flow, dispatch events to indicate progress\n   * if not, resolve a promise when the proof is ready\n   */\n\n  const waitForPOWO = useCallback(async ( // eslint-disable-next-line @typescript-eslint/no-shadow\n  payload) => {\n    logger.debug('usePowo waitForPOWO before expectWalletConnected');\n    const connectedWallet = expectWalletConnected();\n\n    if (connectedWallet) {\n      logger.debug('usePowo waitForPOWO', {\n        payload,\n        publicKey: connectedWallet.publicKey\n      });\n      return new Promise(resolve => {\n        logger.debug('usePowo waitForPOWO walletPowoInProgress', {\n          walletPowoInProgress,\n          refreshInProgress\n        });\n        chainImplementation.proveWalletOwnership().then(proof => {\n          resolve({\n            proof,\n            payload\n          });\n          dispatch({\n            type: 'walletPowoComplete'\n          });\n          dispatch({\n            type: 'civicPass_check_token_status'\n          });\n        }).catch(error => {\n          logger.error('Proof of wallet ownership error: ', error);\n          dispatch({\n            type: 'walletPowoIncomplete'\n          });\n        });\n      });\n    }\n\n    return {};\n  }, [expectWalletConnected, walletPowoInProgress, chainImplementation]);\n  return {\n    waitForConfirmPOWO,\n    waitForPOWO\n  };\n};\n\nexport default usePowo;","map":{"version":3,"sources":["C:/Test Mint/metaplex/JS/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/usePOWO.js"],"names":["useCallback","logger","useWalletHooks","usePowo","state","dispatch","wallet","chainImplementation","powoFinished","walletPowoInProgress","refreshInProgress","expectWalletConnected","waitForConfirmPOWO","payload","debug","Promise","resolve","waitForPOWO","connectedWallet","publicKey","proveWalletOwnership","then","proof","type","catch","error"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AACA,MAAMC,OAAO,GAAG,OAAkCC,KAAlC,EAAyCC,QAAzC,KAAsD;AAAA,MAArD;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAqD;AAClE,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,oBAAhB;AAAsCC,IAAAA;AAAtC,MAA4DN,KAAlE;AACA,QAAM;AAAEO,IAAAA;AAAF,MAA4BT,cAAc,CAACI,MAAD,EAASF,KAAT,EAAgBC,QAAhB,CAAhD;AACA;AACJ;AACA;AACA;;AACI,QAAMO,kBAAkB,GAAGZ,WAAW,EACtC;AACA,QAAOa,OAAP,IAAmB;AACfZ,IAAAA,MAAM,CAACa,KAAP,CAAa,yDAAb,EAAwE;AACpED,MAAAA;AADoE,KAAxE;AAGAF,IAAAA,qBAAqB;AACrB,WAAO,IAAII,OAAJ,CAAaC,OAAD,IAAa;AAC5Bf,MAAAA,MAAM,CAACa,KAAP,CAAa,4BAAb,EAA2C;AAAEN,QAAAA;AAAF,OAA3C;;AACA,UAAIA,YAAJ,EAAkB;AACdQ,QAAAA,OAAO,CAACH,OAAD,CAAP;AACH;AACJ,KALM,CAAP;AAMH,GAbqC,EAanC,CAACL,YAAD,EAAeG,qBAAf,CAbmC,CAAtC;AAcA;AACJ;AACA;AACA;AACA;;AACI,QAAMM,WAAW,GAAGjB,WAAW,CAAC,QAChC;AACAa,EAAAA,OAFgC,KAEpB;AACRZ,IAAAA,MAAM,CAACa,KAAP,CAAa,kDAAb;AACA,UAAMI,eAAe,GAAGP,qBAAqB,EAA7C;;AACA,QAAIO,eAAJ,EAAqB;AACjBjB,MAAAA,MAAM,CAACa,KAAP,CAAa,qBAAb,EAAoC;AAChCD,QAAAA,OADgC;AAEhCM,QAAAA,SAAS,EAAED,eAAe,CAACC;AAFK,OAApC;AAIA,aAAO,IAAIJ,OAAJ,CAAaC,OAAD,IAAa;AAC5Bf,QAAAA,MAAM,CAACa,KAAP,CAAa,0CAAb,EAAyD;AACrDL,UAAAA,oBADqD;AAErDC,UAAAA;AAFqD,SAAzD;AAIAH,QAAAA,mBAAmB,CACda,oBADL,GAEKC,IAFL,CAEWC,KAAD,IAAW;AACjBN,UAAAA,OAAO,CAAC;AAAEM,YAAAA,KAAF;AAAST,YAAAA;AAAT,WAAD,CAAP;AACAR,UAAAA,QAAQ,CAAC;AAAEkB,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAR;AACAlB,UAAAA,QAAQ,CAAC;AAAEkB,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAR;AACH,SAND,EAOKC,KAPL,CAOYC,KAAD,IAAW;AAClBxB,UAAAA,MAAM,CAACwB,KAAP,CAAa,mCAAb,EAAkDA,KAAlD;AACApB,UAAAA,QAAQ,CAAC;AAAEkB,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAR;AACH,SAVD;AAWH,OAhBM,CAAP;AAiBH;;AACD,WAAO,EAAP;AACH,GA7B8B,EA6B5B,CAACZ,qBAAD,EAAwBF,oBAAxB,EAA8CF,mBAA9C,CA7B4B,CAA/B;AA8BA,SAAO;AACHK,IAAAA,kBADG;AAEHK,IAAAA;AAFG,GAAP;AAIH,CA5DD;;AA6DA,eAAed,OAAf","sourcesContent":["import { useCallback } from 'react';\nimport logger from '../logger';\nimport useWalletHooks from './useWalletHooks';\nconst usePowo = ({ wallet, chainImplementation }, state, dispatch) => {\n    const { powoFinished, walletPowoInProgress, refreshInProgress } = state;\n    const { expectWalletConnected } = useWalletHooks(wallet, state, dispatch);\n    /**\n     * wait until the user has confirmed they want to continue the proof of wallet ownership flow\n     * then resolve the promise\n     */\n    const waitForConfirmPOWO = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    async (payload) => {\n        logger.debug('usePowo waitForConfirmPOWO before expectWalletConnected', {\n            payload,\n        });\n        expectWalletConnected();\n        return new Promise((resolve) => {\n            logger.debug('usePowo waitForConfirmPOWO', { powoFinished });\n            if (powoFinished) {\n                resolve(payload);\n            }\n        });\n    }, [powoFinished, expectWalletConnected]);\n    /**\n     * wait until the user has provided proof of wallet ownership using their connected wallet\n     * if this was triggered from the refresh flow, dispatch events to indicate progress\n     * if not, resolve a promise when the proof is ready\n     */\n    const waitForPOWO = useCallback(async (\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    payload) => {\n        logger.debug('usePowo waitForPOWO before expectWalletConnected');\n        const connectedWallet = expectWalletConnected();\n        if (connectedWallet) {\n            logger.debug('usePowo waitForPOWO', {\n                payload,\n                publicKey: connectedWallet.publicKey,\n            });\n            return new Promise((resolve) => {\n                logger.debug('usePowo waitForPOWO walletPowoInProgress', {\n                    walletPowoInProgress,\n                    refreshInProgress,\n                });\n                chainImplementation\n                    .proveWalletOwnership()\n                    .then((proof) => {\n                    resolve({ proof, payload });\n                    dispatch({ type: 'walletPowoComplete' });\n                    dispatch({ type: 'civicPass_check_token_status' });\n                })\n                    .catch((error) => {\n                    logger.error('Proof of wallet ownership error: ', error);\n                    dispatch({ type: 'walletPowoIncomplete' });\n                });\n            });\n        }\n        return {};\n    }, [expectWalletConnected, walletPowoInProgress, chainImplementation]);\n    return {\n        waitForConfirmPOWO,\n        waitForPOWO,\n    };\n};\nexport default usePowo;\n"]},"metadata":{},"sourceType":"module"}