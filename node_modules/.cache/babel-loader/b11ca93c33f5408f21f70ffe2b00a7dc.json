{"ast":null,"code":"import _asyncToGenerator from \"F:\\\\SitePortfolio\\\\skillfond\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _regeneratorRuntime from \"F:\\\\SitePortfolio\\\\skillfond\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { State } from '@identity.com/solana-gateway-ts';\nimport logger from '../logger';\nimport { pollUntilConditionMet } from './utils';\n\nvar pollForActiveOnChainToken = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(chainImplementation) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", pollUntilConditionMet(chainImplementation.findGatewayToken, function (onChainToken) {\n              if (!onChainToken) return false; // keep polling\n\n              // keep polling\n              if (onChainToken.state === State.ACTIVE) return true;\n              throw new Error('Token found but not ACTIVE');\n            }, 2000, // wait 2 seconds between retries\n            20 // poll 20 times\n            ));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function pollForActiveOnChainToken(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar GatewayTokenActionCreatorImplementation = function GatewayTokenActionCreatorImplementation(_ref2) {\n  var wallet = _ref2.wallet,\n      chainImplementation = _ref2.chainImplementation,\n      gatekeeperClient = _ref2.gatekeeperClient,\n      dispatch = _ref2.dispatch;\n\n  var logDebug = function logDebug(message) {\n    var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return logger.debug(\"[useChain] \".concat(message), obj);\n  };\n\n  var logError = function logError(message) {\n    var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return logger.error(\"[useChain] \".concat(message), obj);\n  };\n\n  var isTokenCreated = function isTokenCreated(code) {\n    return code === 200;\n  };\n\n  var isTokenPending = function isTokenPending(code) {\n    return code === 202 || code === 404;\n  };\n\n  var isFailure = function isFailure(code) {\n    return !isTokenPending(code) && code >= 400;\n  };\n\n  var waitForGatewayToken = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var code, token;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return gatekeeperClient().pollGatekeeperStatus(wallet.publicKey);\n\n            case 2:\n              code = _context2.sent;\n\n              if (!isTokenCreated(code)) {\n                _context2.next = 14;\n                break;\n              }\n\n              _context2.next = 6;\n              return pollForActiveOnChainToken(chainImplementation);\n\n            case 6:\n              token = _context2.sent;\n              logDebug('Result from pollForActiveOnChainToken', token);\n\n              if (token) {\n                _context2.next = 11;\n                break;\n              }\n\n              logError(\"Token not found onChain: \".concat(code));\n              throw new Error(\"Token not found onChain: \".concat(code));\n\n            case 11:\n              dispatch({\n                type: 'tokenChange',\n                token: token\n              });\n              dispatch({\n                type: 'civicPass_check_token_status',\n                token: token\n              });\n              return _context2.abrupt(\"return\");\n\n            case 14:\n              if (!(isTokenPending(code) || isFailure(code))) {\n                _context2.next = 18;\n                break;\n              }\n\n              logError('Failed to find Gateway token', code);\n              dispatch({\n                type: 'gatekeeperError'\n              });\n              return _context2.abrupt(\"return\");\n\n            case 18:\n              throw new Error(\"setTokenIfCreatedStatus error: \".concat(code));\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function waitForGatewayToken() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return {\n    waitForGatewayToken: waitForGatewayToken\n  };\n};\n\nexport { GatewayTokenActionCreatorImplementation };","map":{"version":3,"sources":["F:/SitePortfolio/skillfond/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/actionCreator/gatewayToken.actionCreator.js"],"names":["State","logger","pollUntilConditionMet","pollForActiveOnChainToken","chainImplementation","findGatewayToken","onChainToken","state","ACTIVE","Error","GatewayTokenActionCreatorImplementation","wallet","gatekeeperClient","dispatch","logDebug","message","obj","debug","logError","error","isTokenCreated","code","isTokenPending","isFailure","waitForGatewayToken","pollGatekeeperStatus","publicKey","token","type"],"mappings":"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","sourcesContent":["import { State } from '@identity.com/solana-gateway-ts';\nimport logger from '../logger';\nimport { pollUntilConditionMet } from './utils';\nconst pollForActiveOnChainToken = async (chainImplementation) => {\n    return pollUntilConditionMet(chainImplementation.findGatewayToken, (onChainToken) => {\n        if (!onChainToken)\n            return false; // keep polling\n        if (onChainToken.state === State.ACTIVE)\n            return true;\n        throw new Error('Token found but not ACTIVE');\n    }, 2000, // wait 2 seconds between retries\n    20 // poll 20 times\n    );\n};\nconst GatewayTokenActionCreatorImplementation = ({ wallet, chainImplementation, gatekeeperClient, dispatch, }) => {\n    const logDebug = (message, obj = null) => logger.debug(`[useChain] ${message}`, obj);\n    const logError = (message, obj = null) => logger.error(`[useChain] ${message}`, obj);\n    const isTokenCreated = (code) => code === 200;\n    const isTokenPending = (code) => code === 202 || code === 404;\n    const isFailure = (code) => !isTokenPending(code) && code >= 400;\n    const waitForGatewayToken = async () => {\n        // poll the gatekeeper until we have a status for a created record\n        // if we don't get a created token, then we consider it a failure\n        const code = await gatekeeperClient().pollGatekeeperStatus(wallet.publicKey);\n        if (isTokenCreated(code)) {\n            const token = await pollForActiveOnChainToken(chainImplementation);\n            logDebug('Result from pollForActiveOnChainToken', token);\n            if (!token) {\n                logError(`Token not found onChain: ${code}`);\n                throw new Error(`Token not found onChain: ${code}`);\n            }\n            dispatch({ type: 'tokenChange', token });\n            dispatch({ type: 'civicPass_check_token_status', token });\n            return;\n        }\n        // retries have been exhausted and we still don't have a token\n        // or the gatekeeper threw an error during issuance attempt\n        if (isTokenPending(code) || isFailure(code)) {\n            logError('Failed to find Gateway token', code);\n            dispatch({ type: 'gatekeeperError' });\n            return;\n        }\n        throw new Error(`setTokenIfCreatedStatus error: ${code}`);\n    };\n    return { waitForGatewayToken };\n};\nexport { GatewayTokenActionCreatorImplementation };\n"]},"metadata":{},"sourceType":"module"}