{"ast":null,"code":"import { findGatewayToken, State } from '@identity.com/solana-gateway-ts';\nimport React, { useEffect, useRef, useState } from 'react';\nimport badgeSupportedGatekeeperNetworks from './constants';\nimport { clusterEndpoint } from '../config';\nimport { getSolanaConnection } from '../connection';\nimport BadgeSvg from './Badge.svg'; // Used to avoid making multiple blockchain calls when rerendering\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n\n  return ref.current;\n}\n\nconst Badge = _ref => {\n  let {\n    connection,\n    gatekeeperNetwork,\n    publicKey,\n    clusterName = 'mainnet-beta'\n  } = _ref;\n  const [token, setToken] = useState();\n  const prevGKN = usePrevious(gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58());\n  const prevPubkey = usePrevious(publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58());\n  const prevClusterName = usePrevious(clusterName);\n  useEffect(() => {\n    // only make another call if anything changes, as we cannot\n    // rely on useEffect to protect us from this\n    if ((gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58()) !== prevGKN || (publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58()) !== prevPubkey || clusterName !== prevClusterName) {\n      const clusterUrl = clusterEndpoint(clusterName);\n      const normalizedConnection = connection || getSolanaConnection(clusterUrl); // only set the GT if one was found\n\n      findGatewayToken(normalizedConnection, publicKey, gatekeeperNetwork).then(gt => setToken(gt || undefined));\n    }\n  }, [gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58(), publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58(), clusterName, connection]);\n\n  if (!badgeSupportedGatekeeperNetworks.includes(gatekeeperNetwork.toBase58())) {\n    return React.createElement(React.Fragment, null);\n  }\n\n  return (token === null || token === void 0 ? void 0 : token.state) === State.ACTIVE ? React.createElement(\"a\", {\n    href: \"https://www.civic.com\",\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    \"data-testid\": \"badgeLink\"\n  }, React.createElement(BadgeSvg, null)) : React.createElement(React.Fragment, null);\n};\n\nexport default Badge;","map":{"version":3,"sources":["C:/Test Mint/metaplex/JS/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/solana/badge/Badge.js"],"names":["findGatewayToken","State","React","useEffect","useRef","useState","badgeSupportedGatekeeperNetworks","clusterEndpoint","getSolanaConnection","BadgeSvg","usePrevious","value","ref","current","Badge","connection","gatekeeperNetwork","publicKey","clusterName","token","setToken","prevGKN","toBase58","prevPubkey","prevClusterName","clusterUrl","normalizedConnection","then","gt","undefined","includes","createElement","Fragment","state","ACTIVE","href","target","rel"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,KAA3B,QAAwC,iCAAxC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,gCAAP,MAA6C,aAA7C;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,SAASC,mBAAT,QAAoC,eAApC;AACA,OAAOC,QAAP,MAAqB,aAArB,C,CACA;;AACA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACxB,QAAMC,GAAG,GAAGR,MAAM,EAAlB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,GAAG,CAACC,OAAJ,GAAcF,KAAd;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CAFwB,CAIX;AACb;;AACA,SAAOC,GAAG,CAACC,OAAX;AACH;;AACD,MAAMC,KAAK,GAAG,QAAgF;AAAA,MAA/E;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,iBAAd;AAAiCC,IAAAA,SAAjC;AAA4CC,IAAAA,WAAW,GAAG;AAA1D,GAA+E;AAC1F,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,EAAlC;AACA,QAAMgB,OAAO,GAAGX,WAAW,CAACM,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACM,QAAlB,EAAvE,CAA3B;AACA,QAAMC,UAAU,GAAGb,WAAW,CAACO,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACK,QAAV,EAAvD,CAA9B;AACA,QAAME,eAAe,GAAGd,WAAW,CAACQ,WAAD,CAAnC;AACAf,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA,QAAI,CAACa,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACM,QAAlB,EAAvE,MAAyGD,OAAzG,IACA,CAACJ,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACK,QAAV,EAAvD,MAAiFC,UADjF,IAEAL,WAAW,KAAKM,eAFpB,EAEqC;AACjC,YAAMC,UAAU,GAAGlB,eAAe,CAACW,WAAD,CAAlC;AACA,YAAMQ,oBAAoB,GAAGX,UAAU,IAAIP,mBAAmB,CAACiB,UAAD,CAA9D,CAFiC,CAGjC;;AACAzB,MAAAA,gBAAgB,CAAC0B,oBAAD,EAAuBT,SAAvB,EAAkCD,iBAAlC,CAAhB,CAAqEW,IAArE,CAA2EC,EAAD,IAAQR,QAAQ,CAACQ,EAAE,IAAIC,SAAP,CAA1F;AACH;AACJ,GAXQ,EAWN,CAACb,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACM,QAAlB,EAAvE,EAAqGL,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACK,QAAV,EAA3J,EAAiLJ,WAAjL,EAA8LH,UAA9L,CAXM,CAAT;;AAYA,MAAI,CAACT,gCAAgC,CAACwB,QAAjC,CAA0Cd,iBAAiB,CAACM,QAAlB,EAA1C,CAAL,EAA8E;AAC1E,WAAOpB,KAAK,CAAC6B,aAAN,CAAoB7B,KAAK,CAAC8B,QAA1B,EAAoC,IAApC,CAAP;AACH;;AACD,SAAO,CAACb,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACc,KAArD,MAAgEhC,KAAK,CAACiC,MAAtE,GAAgFhC,KAAK,CAAC6B,aAAN,CAAoB,GAApB,EAAyB;AAAEI,IAAAA,IAAI,EAAE,uBAAR;AAAiCC,IAAAA,MAAM,EAAE,QAAzC;AAAmDC,IAAAA,GAAG,EAAE,YAAxD;AAAsE,mBAAe;AAArF,GAAzB,EACnFnC,KAAK,CAAC6B,aAAN,CAAoBtB,QAApB,EAA8B,IAA9B,CADmF,CAAhF,GACsCP,KAAK,CAAC6B,aAAN,CAAoB7B,KAAK,CAAC8B,QAA1B,EAAoC,IAApC,CAD7C;AAEH,CAtBD;;AAuBA,eAAelB,KAAf","sourcesContent":["import { findGatewayToken, State } from '@identity.com/solana-gateway-ts';\nimport React, { useEffect, useRef, useState } from 'react';\nimport badgeSupportedGatekeeperNetworks from './constants';\nimport { clusterEndpoint } from '../config';\nimport { getSolanaConnection } from '../connection';\nimport BadgeSvg from './Badge.svg';\n// Used to avoid making multiple blockchain calls when rerendering\nfunction usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    }, [value]); // Only re-run if value changes\n    // Return previous value (happens before update in useEffect above)\n    return ref.current;\n}\nconst Badge = ({ connection, gatekeeperNetwork, publicKey, clusterName = 'mainnet-beta' }) => {\n    const [token, setToken] = useState();\n    const prevGKN = usePrevious(gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58());\n    const prevPubkey = usePrevious(publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58());\n    const prevClusterName = usePrevious(clusterName);\n    useEffect(() => {\n        // only make another call if anything changes, as we cannot\n        // rely on useEffect to protect us from this\n        if ((gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58()) !== prevGKN ||\n            (publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58()) !== prevPubkey ||\n            clusterName !== prevClusterName) {\n            const clusterUrl = clusterEndpoint(clusterName);\n            const normalizedConnection = connection || getSolanaConnection(clusterUrl);\n            // only set the GT if one was found\n            findGatewayToken(normalizedConnection, publicKey, gatekeeperNetwork).then((gt) => setToken(gt || undefined));\n        }\n    }, [gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58(), publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58(), clusterName, connection]);\n    if (!badgeSupportedGatekeeperNetworks.includes(gatekeeperNetwork.toBase58())) {\n        return React.createElement(React.Fragment, null);\n    }\n    return (token === null || token === void 0 ? void 0 : token.state) === State.ACTIVE ? (React.createElement(\"a\", { href: \"https://www.civic.com\", target: \"_blank\", rel: \"noreferrer\", \"data-testid\": \"badgeLink\" },\n        React.createElement(BadgeSvg, null))) : (React.createElement(React.Fragment, null));\n};\nexport default Badge;\n"]},"metadata":{},"sourceType":"module"}