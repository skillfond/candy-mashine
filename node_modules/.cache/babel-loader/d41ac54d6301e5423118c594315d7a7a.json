{"ast":null,"code":"import logger from '../logger';\nimport { CivicPassMessageAction, GatewayStatus, RefreshTokenState, TokenIssuanceState } from '../types';\nimport { resetState, statusFromToken } from './utils';\nexport var combineReducers = function combineReducers() {\n  for (var _len = arguments.length, reducers = new Array(_len), _key = 0; _key < _len; _key++) {\n    reducers[_key] = arguments[_key];\n  }\n\n  return function (state, action) {\n    return reducers.reduce(function (newState, reducer) {\n      return reducer(newState, action);\n    }, state);\n  };\n};\nexport var reducer = function reducer(state, action) {\n  var _a;\n\n  var gatewayStatus = statusFromToken(state, state.gatewayToken) || GatewayStatus.UNKNOWN;\n  var updatedState = Object.assign(Object.assign({}, state), {\n    gatewayStatus: gatewayStatus\n  }); // eslint-disable-next-line no-prototype-builtins\n\n  var tokenCreationInProgress = !!((_a = updatedState.civicPass.responsePayload) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(CivicPassMessageAction.ISSUANCE));\n  logger.debug(\"reducer.action: \".concat(action.type), GatewayStatus[updatedState.gatewayStatus]);\n\n  switch (action.type) {\n    case 'startWalletPowo':\n      {\n        return Object.assign(Object.assign({}, updatedState), {\n          walletPowoInProgress: true\n        });\n      }\n\n    case 'walletPowoComplete':\n      {\n        logger.debug('tokenCreationInProgress', {\n          tokenCreationInProgress: tokenCreationInProgress\n        });\n        return Object.assign(Object.assign({}, updatedState), {\n          // only move to IN_REVIEW if it's during the initial token creation flow\n          gatewayStatus: tokenCreationInProgress ? GatewayStatus.IN_REVIEW : updatedState.gatewayStatus,\n          walletPowoInProgress: false,\n          firstTokenCheck: false\n        });\n      }\n\n    case 'walletPowoIncomplete':\n      {\n        logger.debug('tokenCreationInProgress', {\n          tokenCreationInProgress: tokenCreationInProgress\n        });\n        return Object.assign(Object.assign({}, state), {\n          renderIframe: false,\n          iframeMinimized: true,\n          powoFinished: false,\n          refreshTokenState: RefreshTokenState.IN_PROGRESS\n        });\n      }\n\n    case 'tokenChange':\n      return Object.assign(Object.assign({}, state), {\n        gatewayStatus: statusFromToken(state, action.token),\n        powoFinished: false,\n        gatewayToken: action.token,\n        tokenIssuanceState: TokenIssuanceState.COMPLETED\n      });\n\n    case 'powoComplete':\n      return Object.assign(Object.assign({}, updatedState), {\n        gatewayStatus: GatewayStatus.PROOF_OF_WALLET_OWNERSHIP,\n        powoFinished: true,\n        powoRequested: undefined,\n        refreshIntervalId: undefined,\n        refreshTokenState: state.refreshTokenState === RefreshTokenState.IN_PROGRESS ? RefreshTokenState.REQUIRES_POWO : state.refreshTokenState\n      });\n\n    case 'walletDisconnected':\n      return resetState(state);\n\n    case 'requestGatekeeperIssuance':\n      return Object.assign(Object.assign({}, updatedState), {\n        powoFinished: false,\n        walletPowoInProgress: false,\n        tokenIssuanceState: TokenIssuanceState.IN_PROGRESS\n      });\n\n    case 'requestGatekeeperIssuanceComplete':\n      return Object.assign(Object.assign({}, updatedState), {\n        tokenIssuanceState: TokenIssuanceState.COMPLETED\n      });\n\n    case 'requestGatekeeperIssuanceFailed':\n      return Object.assign(Object.assign({}, resetState(state)), {\n        gatewayStatus: GatewayStatus.ERROR,\n        tokenIssuanceState: TokenIssuanceState.FAILED\n      });\n\n    case 'refreshAttemptDone':\n      return Object.assign(Object.assign({}, updatedState), {\n        refreshInProgress: false\n      });\n\n    case 'updateStateWithProps':\n      return Object.assign(Object.assign({}, state), {\n        stage: action.stage,\n        walletAddress: action.walletAddress,\n        redirectUrl: action.redirectUrl,\n        gatekeeperNetworkAddress: action.gatekeeperNetworkAddress\n      });\n\n    case 'gatekeeperError':\n      return Object.assign(Object.assign({}, state), {\n        gatewayStatus: GatewayStatus.ERROR\n      });\n\n    case 'gatekeeperNetworkChanged':\n      return Object.assign(Object.assign({}, resetState(state)), {\n        gatekeeperNetworkAddress: action.gatekeeperNetworkAddress,\n        walletAddress: state.walletAddress\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Test Mint/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/useReducer/reducer.js"],"names":["logger","CivicPassMessageAction","GatewayStatus","RefreshTokenState","TokenIssuanceState","resetState","statusFromToken","combineReducers","reducers","state","action","reduce","newState","reducer","_a","gatewayStatus","gatewayToken","UNKNOWN","updatedState","Object","assign","tokenCreationInProgress","civicPass","responsePayload","hasOwnProperty","ISSUANCE","debug","type","walletPowoInProgress","IN_REVIEW","firstTokenCheck","renderIframe","iframeMinimized","powoFinished","refreshTokenState","IN_PROGRESS","token","tokenIssuanceState","COMPLETED","PROOF_OF_WALLET_OWNERSHIP","powoRequested","undefined","refreshIntervalId","REQUIRES_POWO","ERROR","FAILED","refreshInProgress","stage","walletAddress","redirectUrl","gatekeeperNetworkAddress"],"mappings":"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","sourcesContent":["import logger from '../logger';\nimport { CivicPassMessageAction, GatewayStatus, RefreshTokenState, TokenIssuanceState } from '../types';\nimport { resetState, statusFromToken } from './utils';\nexport const combineReducers = (...reducers) => (state, action) => reducers.reduce((newState, reducer) => reducer(newState, action), state);\nexport const reducer = (state, action) => {\n    var _a;\n    const gatewayStatus = statusFromToken(state, state.gatewayToken) || GatewayStatus.UNKNOWN;\n    const updatedState = Object.assign(Object.assign({}, state), { gatewayStatus });\n    // eslint-disable-next-line no-prototype-builtins\n    const tokenCreationInProgress = !!((_a = updatedState.civicPass.responsePayload) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(CivicPassMessageAction.ISSUANCE));\n    logger.debug(`reducer.action: ${action.type}`, GatewayStatus[updatedState.gatewayStatus]);\n    switch (action.type) {\n        case 'startWalletPowo': {\n            return Object.assign(Object.assign({}, updatedState), { walletPowoInProgress: true });\n        }\n        case 'walletPowoComplete': {\n            logger.debug('tokenCreationInProgress', { tokenCreationInProgress });\n            return Object.assign(Object.assign({}, updatedState), { \n                // only move to IN_REVIEW if it's during the initial token creation flow\n                gatewayStatus: tokenCreationInProgress ? GatewayStatus.IN_REVIEW : updatedState.gatewayStatus, walletPowoInProgress: false, firstTokenCheck: false });\n        }\n        case 'walletPowoIncomplete': {\n            logger.debug('tokenCreationInProgress', { tokenCreationInProgress });\n            return Object.assign(Object.assign({}, state), { renderIframe: false, iframeMinimized: true, powoFinished: false, refreshTokenState: RefreshTokenState.IN_PROGRESS });\n        }\n        case 'tokenChange':\n            return Object.assign(Object.assign({}, state), { gatewayStatus: statusFromToken(state, action.token), powoFinished: false, gatewayToken: action.token, tokenIssuanceState: TokenIssuanceState.COMPLETED });\n        case 'powoComplete':\n            return Object.assign(Object.assign({}, updatedState), { gatewayStatus: GatewayStatus.PROOF_OF_WALLET_OWNERSHIP, powoFinished: true, powoRequested: undefined, refreshIntervalId: undefined, refreshTokenState: state.refreshTokenState === RefreshTokenState.IN_PROGRESS\n                    ? RefreshTokenState.REQUIRES_POWO\n                    : state.refreshTokenState });\n        case 'walletDisconnected':\n            return resetState(state);\n        case 'requestGatekeeperIssuance':\n            return Object.assign(Object.assign({}, updatedState), { powoFinished: false, walletPowoInProgress: false, tokenIssuanceState: TokenIssuanceState.IN_PROGRESS });\n        case 'requestGatekeeperIssuanceComplete':\n            return Object.assign(Object.assign({}, updatedState), { tokenIssuanceState: TokenIssuanceState.COMPLETED });\n        case 'requestGatekeeperIssuanceFailed':\n            return Object.assign(Object.assign({}, resetState(state)), { gatewayStatus: GatewayStatus.ERROR, tokenIssuanceState: TokenIssuanceState.FAILED });\n        case 'refreshAttemptDone':\n            return Object.assign(Object.assign({}, updatedState), { refreshInProgress: false });\n        case 'updateStateWithProps':\n            return Object.assign(Object.assign({}, state), { stage: action.stage, walletAddress: action.walletAddress, redirectUrl: action.redirectUrl, gatekeeperNetworkAddress: action.gatekeeperNetworkAddress });\n        case 'gatekeeperError':\n            return Object.assign(Object.assign({}, state), { gatewayStatus: GatewayStatus.ERROR });\n        case 'gatekeeperNetworkChanged':\n            return Object.assign(Object.assign({}, resetState(state)), { gatekeeperNetworkAddress: action.gatekeeperNetworkAddress, walletAddress: state.walletAddress });\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}