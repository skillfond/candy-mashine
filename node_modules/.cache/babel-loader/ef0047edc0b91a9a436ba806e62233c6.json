{"ast":null,"code":"import _slicedToArray from \"F:\\\\SitePortfolio\\\\skillfond\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\nimport _asyncToGenerator from \"F:\\\\SitePortfolio\\\\skillfond\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _regeneratorRuntime from \"F:\\\\SitePortfolio\\\\skillfond\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { findGatewayTokens, onGatewayTokenChange, removeAccountChangeListener } from '@identity.com/solana-gateway-ts';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { prove } from '@identity.com/prove-solana-wallet';\nimport { getGatekeeperEndpoint, makeConfig, urlToCluster } from './config';\nimport { ChainType, State } from '../types';\nimport { useGateway } from '../gateway/GatewayContext';\nimport logger from '../logger'; // eslint-disable-next-line import/prefer-default-export\n\nexport var chainImplementation = function chainImplementation(_ref) {\n  var clusterUrl = _ref.clusterUrl,\n      publicKey = _ref.publicKey,\n      signTransaction = _ref.signTransaction,\n      gatekeeperNetworkAddress = _ref.gatekeeperNetworkAddress,\n      stage = _ref.stage;\n  logger.debug('Connecting to cluster with commitment recent', clusterUrl);\n  var connection = new Connection(clusterUrl, 'processed');\n  return {\n    addOnGatewayTokenChangeListener: function addOnGatewayTokenChangeListener(gatewayToken, tokenDidChange) {\n      return onGatewayTokenChange(connection, new PublicKey(gatewayToken.identifier), function (token) {\n        tokenDidChange({\n          issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n          gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n          owner: token.owner.toBase58(),\n          state: State[token.state],\n          identifier: token.publicKey.toBase58(),\n          expiryTime: token.expiryTime\n        });\n      });\n    },\n    removeOnGatewayTokenChangeListener: function removeOnGatewayTokenChangeListener(listenerId) {\n      removeAccountChangeListener(connection, listenerId);\n    },\n    findGatewayToken: function () {\n      var _findGatewayToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _ref2, _ref3, onChainToken;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return findGatewayTokens(connection, publicKey, new PublicKey(gatekeeperNetworkAddress), true);\n\n              case 2:\n                _context.t0 = _context.sent;\n\n                if (_context.t0) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.t0 = [];\n\n              case 5:\n                _ref2 = _context.t0;\n                _ref3 = _slicedToArray(_ref2, 1);\n                onChainToken = _ref3[0];\n\n                if (onChainToken) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", undefined);\n\n              case 10:\n                return _context.abrupt(\"return\", {\n                  issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n                  gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n                  owner: onChainToken.owner.toBase58(),\n                  state: State[onChainToken.state],\n                  identifier: onChainToken.publicKey.toBase58(),\n                  expiryTime: onChainToken.expiryTime\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function findGatewayToken() {\n        return _findGatewayToken.apply(this, arguments);\n      }\n\n      return findGatewayToken;\n    }(),\n    proveWalletOwnership: function () {\n      var _proveWalletOwnership = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return prove(publicKey, signTransaction, makeConfig(clusterUrl));\n\n              case 2:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result.toString('base64'));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function proveWalletOwnership() {\n        return _proveWalletOwnership.apply(this, arguments);\n      }\n\n      return proveWalletOwnership;\n    }(),\n    chainType: ChainType.SOLANA,\n    httpConfig: {\n      baseUrl: getGatekeeperEndpoint(stage),\n      queryParams: {\n        network: urlToCluster(clusterUrl)\n      }\n    }\n  };\n};\nexport var useSolanaGateway = function useSolanaGateway() {\n  var _useGateway = useGateway(),\n      gatewayToken = _useGateway.gatewayToken;\n\n  var solanaGatewayToken = gatewayToken ? {\n    issuingGatekeeper: new PublicKey(gatewayToken.issuingGatekeeper),\n    gatekeeperNetworkAddress: new PublicKey(gatewayToken.gatekeeperNetworkAddress),\n    owner: new PublicKey(gatewayToken.owner),\n    state: gatewayToken.state,\n    publicKey: new PublicKey(gatewayToken.identifier),\n    expiryTime: gatewayToken.expiryTime\n  } : undefined;\n  return Object.assign(Object.assign({}, useGateway()), {\n    gatewayToken: solanaGatewayToken\n  });\n};","map":{"version":3,"sources":["F:/SitePortfolio/skillfond/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/solana/chainImplementation.js"],"names":["findGatewayTokens","onGatewayTokenChange","removeAccountChangeListener","Connection","PublicKey","prove","getGatekeeperEndpoint","makeConfig","urlToCluster","ChainType","State","useGateway","logger","chainImplementation","clusterUrl","publicKey","signTransaction","gatekeeperNetworkAddress","stage","debug","connection","addOnGatewayTokenChangeListener","gatewayToken","tokenDidChange","identifier","token","issuingGatekeeper","toBase58","gatekeeperNetwork","owner","state","expiryTime","removeOnGatewayTokenChangeListener","listenerId","findGatewayToken","onChainToken","undefined","proveWalletOwnership","result","toString","chainType","SOLANA","httpConfig","baseUrl","queryParams","network","useSolanaGateway","solanaGatewayToken","Object","assign"],"mappings":"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","sourcesContent":["import { findGatewayTokens, onGatewayTokenChange, removeAccountChangeListener } from '@identity.com/solana-gateway-ts';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { prove } from '@identity.com/prove-solana-wallet';\nimport { getGatekeeperEndpoint, makeConfig, urlToCluster } from './config';\nimport { ChainType, State } from '../types';\nimport { useGateway } from '../gateway/GatewayContext';\nimport logger from '../logger';\n// eslint-disable-next-line import/prefer-default-export\nexport const chainImplementation = ({ clusterUrl, publicKey, signTransaction, gatekeeperNetworkAddress, stage, }) => {\n    logger.debug('Connecting to cluster with commitment recent', clusterUrl);\n    const connection = new Connection(clusterUrl, 'processed');\n    return {\n        addOnGatewayTokenChangeListener: (gatewayToken, tokenDidChange) => {\n            return onGatewayTokenChange(connection, new PublicKey(gatewayToken.identifier), (token) => {\n                tokenDidChange({\n                    issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n                    gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n                    owner: token.owner.toBase58(),\n                    state: State[token.state],\n                    identifier: token.publicKey.toBase58(),\n                    expiryTime: token.expiryTime,\n                });\n            });\n        },\n        removeOnGatewayTokenChangeListener: (listenerId) => {\n            removeAccountChangeListener(connection, listenerId);\n        },\n        findGatewayToken: async () => {\n            const [onChainToken] = (await findGatewayTokens(connection, publicKey, new PublicKey(gatekeeperNetworkAddress), true)) || [];\n            if (!onChainToken)\n                return undefined;\n            return {\n                issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n                gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n                owner: onChainToken.owner.toBase58(),\n                state: State[onChainToken.state],\n                identifier: onChainToken.publicKey.toBase58(),\n                expiryTime: onChainToken.expiryTime,\n            };\n        },\n        proveWalletOwnership: async () => {\n            const result = await prove(publicKey, signTransaction, makeConfig(clusterUrl));\n            return result.toString('base64');\n        },\n        chainType: ChainType.SOLANA,\n        httpConfig: {\n            baseUrl: getGatekeeperEndpoint(stage),\n            queryParams: { network: urlToCluster(clusterUrl) },\n        },\n    };\n};\nexport const useSolanaGateway = () => {\n    const { gatewayToken } = useGateway();\n    const solanaGatewayToken = gatewayToken\n        ? {\n            issuingGatekeeper: new PublicKey(gatewayToken.issuingGatekeeper),\n            gatekeeperNetworkAddress: new PublicKey(gatewayToken.gatekeeperNetworkAddress),\n            owner: new PublicKey(gatewayToken.owner),\n            state: gatewayToken.state,\n            publicKey: new PublicKey(gatewayToken.identifier),\n            expiryTime: gatewayToken.expiryTime,\n        }\n        : undefined;\n    return Object.assign(Object.assign({}, useGateway()), { gatewayToken: solanaGatewayToken });\n};\n"]},"metadata":{},"sourceType":"module"}