{"ast":null,"code":"import React from 'react';\nimport { clusterEndpoint } from './config';\nimport { GatewayProvider } from '../gateway/GatewayContext';\nimport { chainImplementation } from './chainImplementation';\nimport logger from '../logger'; // eslint-disable-next-line import/prefer-default-export\n\nexport const SolanaGatewayProvider = _ref => {\n  let {\n    children = null,\n    wallet,\n    clusterUrl = clusterEndpoint('mainnet-beta'),\n    gatekeeperNetwork,\n    wrapper,\n    logo,\n    stage = 'prod',\n    redirectUrl,\n    options = {\n      autoShowModal: true\n    }\n  } = _ref;\n\n  if (wallet && wallet.publicKey && gatekeeperNetwork) {\n    const {\n      publicKey,\n      signTransaction\n    } = wallet;\n    const chainImpl = chainImplementation({\n      clusterUrl,\n      publicKey,\n      signTransaction,\n      gatekeeperNetworkAddress: gatekeeperNetwork,\n      stage\n    });\n    const providerWallet = {\n      publicKey: publicKey.toBase58()\n    };\n    logger.info('Client Options', options);\n    return React.createElement(GatewayProvider, {\n      wallet: providerWallet,\n      stage: stage,\n      chainImplementation: chainImpl,\n      gatekeeperNetwork: gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58(),\n      wrapper: wrapper,\n      logo: logo,\n      redirectUrl: redirectUrl,\n      options: options\n    }, children);\n  }\n\n  return React.createElement(React.Fragment, null, children);\n};\nexport { useSolanaGateway } from './chainImplementation';\nexport * from './types';","map":{"version":3,"sources":["C:/Test Mint/metaplex/JS/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/solana/index.js"],"names":["React","clusterEndpoint","GatewayProvider","chainImplementation","logger","SolanaGatewayProvider","children","wallet","clusterUrl","gatekeeperNetwork","wrapper","logo","stage","redirectUrl","options","autoShowModal","publicKey","signTransaction","chainImpl","gatekeeperNetworkAddress","providerWallet","toBase58","info","createElement","Fragment","useSolanaGateway"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,UAAhC;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,OAAOC,MAAP,MAAmB,WAAnB,C,CACA;;AACA,OAAO,MAAMC,qBAAqB,GAAG,QAAkL;AAAA,MAAjL;AAAEC,IAAAA,QAAQ,GAAG,IAAb;AAAmBC,IAAAA,MAAnB;AAA2BC,IAAAA,UAAU,GAAGP,eAAe,CAAC,cAAD,CAAvD;AAAyEQ,IAAAA,iBAAzE;AAA4FC,IAAAA,OAA5F;AAAqGC,IAAAA,IAArG;AAA2GC,IAAAA,KAAK,GAAG,MAAnH;AAA2HC,IAAAA,WAA3H;AAAwIC,IAAAA,OAAO,GAAG;AAAEC,MAAAA,aAAa,EAAE;AAAjB;AAAlJ,GAAiL;;AACnN,MAAIR,MAAM,IAAIA,MAAM,CAACS,SAAjB,IAA8BP,iBAAlC,EAAqD;AACjD,UAAM;AAAEO,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAiCV,MAAvC;AACA,UAAMW,SAAS,GAAGf,mBAAmB,CAAC;AAClCK,MAAAA,UADkC;AAElCQ,MAAAA,SAFkC;AAGlCC,MAAAA,eAHkC;AAIlCE,MAAAA,wBAAwB,EAAEV,iBAJQ;AAKlCG,MAAAA;AALkC,KAAD,CAArC;AAOA,UAAMQ,cAAc,GAAG;AACnBJ,MAAAA,SAAS,EAAEA,SAAS,CAACK,QAAV;AADQ,KAAvB;AAGAjB,IAAAA,MAAM,CAACkB,IAAP,CAAY,gBAAZ,EAA8BR,OAA9B;AACA,WAAQd,KAAK,CAACuB,aAAN,CAAoBrB,eAApB,EAAqC;AAAEK,MAAAA,MAAM,EAAEa,cAAV;AAA0BR,MAAAA,KAAK,EAAEA,KAAjC;AAAwCT,MAAAA,mBAAmB,EAAEe,SAA7D;AAAwET,MAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACY,QAAlB,EAAjK;AAA+LX,MAAAA,OAAO,EAAEA,OAAxM;AAAiNC,MAAAA,IAAI,EAAEA,IAAvN;AAA6NE,MAAAA,WAAW,EAAEA,WAA1O;AAAuPC,MAAAA,OAAO,EAAEA;AAAhQ,KAArC,EAAgTR,QAAhT,CAAR;AACH;;AACD,SAAON,KAAK,CAACuB,aAAN,CAAoBvB,KAAK,CAACwB,QAA1B,EAAoC,IAApC,EAA0ClB,QAA1C,CAAP;AACH,CAjBM;AAkBP,SAASmB,gBAAT,QAAiC,uBAAjC;AACA,cAAc,SAAd","sourcesContent":["import React from 'react';\nimport { clusterEndpoint } from './config';\nimport { GatewayProvider } from '../gateway/GatewayContext';\nimport { chainImplementation } from './chainImplementation';\nimport logger from '../logger';\n// eslint-disable-next-line import/prefer-default-export\nexport const SolanaGatewayProvider = ({ children = null, wallet, clusterUrl = clusterEndpoint('mainnet-beta'), gatekeeperNetwork, wrapper, logo, stage = 'prod', redirectUrl, options = { autoShowModal: true }, }) => {\n    if (wallet && wallet.publicKey && gatekeeperNetwork) {\n        const { publicKey, signTransaction } = wallet;\n        const chainImpl = chainImplementation({\n            clusterUrl,\n            publicKey,\n            signTransaction,\n            gatekeeperNetworkAddress: gatekeeperNetwork,\n            stage,\n        });\n        const providerWallet = {\n            publicKey: publicKey.toBase58(),\n        };\n        logger.info('Client Options', options);\n        return (React.createElement(GatewayProvider, { wallet: providerWallet, stage: stage, chainImplementation: chainImpl, gatekeeperNetwork: gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58(), wrapper: wrapper, logo: logo, redirectUrl: redirectUrl, options: options }, children));\n    }\n    return React.createElement(React.Fragment, null, children);\n};\nexport { useSolanaGateway } from './chainImplementation';\nexport * from './types';\n"]},"metadata":{},"sourceType":"module"}