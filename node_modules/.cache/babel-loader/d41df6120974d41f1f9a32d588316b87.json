{"ast":null,"code":"import { findGatewayTokens, onGatewayTokenChange, removeAccountChangeListener } from '@identity.com/solana-gateway-ts';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { prove } from '@identity.com/prove-solana-wallet';\nimport { getGatekeeperEndpoint, makeConfig, urlToCluster } from './config';\nimport { ChainType, State } from '../types';\nimport { useGateway } from '../gateway/GatewayContext';\nimport logger from '../logger'; // eslint-disable-next-line import/prefer-default-export\n\nexport const chainImplementation = _ref => {\n  let {\n    clusterUrl,\n    publicKey,\n    signTransaction,\n    gatekeeperNetworkAddress,\n    stage\n  } = _ref;\n  logger.debug('Connecting to cluster with commitment recent', clusterUrl);\n  const connection = new Connection(clusterUrl, 'processed');\n  return {\n    addOnGatewayTokenChangeListener: (gatewayToken, tokenDidChange) => {\n      return onGatewayTokenChange(connection, new PublicKey(gatewayToken.identifier), token => {\n        tokenDidChange({\n          issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n          gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n          owner: token.owner.toBase58(),\n          state: State[token.state],\n          identifier: token.publicKey.toBase58(),\n          expiryTime: token.expiryTime\n        });\n      });\n    },\n    removeOnGatewayTokenChangeListener: listenerId => {\n      removeAccountChangeListener(connection, listenerId);\n    },\n    findGatewayToken: async () => {\n      const [onChainToken] = (await findGatewayTokens(connection, publicKey, new PublicKey(gatekeeperNetworkAddress), true)) || [];\n      if (!onChainToken) return undefined;\n      return {\n        issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n        gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n        owner: onChainToken.owner.toBase58(),\n        state: State[onChainToken.state],\n        identifier: onChainToken.publicKey.toBase58(),\n        expiryTime: onChainToken.expiryTime\n      };\n    },\n    proveWalletOwnership: async () => {\n      const result = await prove(publicKey, signTransaction, makeConfig(clusterUrl));\n      return result.toString('base64');\n    },\n    chainType: ChainType.SOLANA,\n    httpConfig: {\n      baseUrl: getGatekeeperEndpoint(stage),\n      queryParams: {\n        network: urlToCluster(clusterUrl)\n      }\n    }\n  };\n};\nexport const useSolanaGateway = () => {\n  const {\n    gatewayToken\n  } = useGateway();\n  const solanaGatewayToken = gatewayToken ? {\n    issuingGatekeeper: new PublicKey(gatewayToken.issuingGatekeeper),\n    gatekeeperNetworkAddress: new PublicKey(gatewayToken.gatekeeperNetworkAddress),\n    owner: new PublicKey(gatewayToken.owner),\n    state: gatewayToken.state,\n    publicKey: new PublicKey(gatewayToken.identifier),\n    expiryTime: gatewayToken.expiryTime\n  } : undefined;\n  return Object.assign(Object.assign({}, useGateway()), {\n    gatewayToken: solanaGatewayToken\n  });\n};","map":{"version":3,"sources":["C:/Test Mint/metaplex/JS/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/solana/chainImplementation.js"],"names":["findGatewayTokens","onGatewayTokenChange","removeAccountChangeListener","Connection","PublicKey","prove","getGatekeeperEndpoint","makeConfig","urlToCluster","ChainType","State","useGateway","logger","chainImplementation","clusterUrl","publicKey","signTransaction","gatekeeperNetworkAddress","stage","debug","connection","addOnGatewayTokenChangeListener","gatewayToken","tokenDidChange","identifier","token","issuingGatekeeper","toBase58","gatekeeperNetwork","owner","state","expiryTime","removeOnGatewayTokenChangeListener","listenerId","findGatewayToken","onChainToken","undefined","proveWalletOwnership","result","toString","chainType","SOLANA","httpConfig","baseUrl","queryParams","network","useSolanaGateway","solanaGatewayToken","Object","assign"],"mappings":"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","sourcesContent":["import { findGatewayTokens, onGatewayTokenChange, removeAccountChangeListener } from '@identity.com/solana-gateway-ts';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { prove } from '@identity.com/prove-solana-wallet';\nimport { getGatekeeperEndpoint, makeConfig, urlToCluster } from './config';\nimport { ChainType, State } from '../types';\nimport { useGateway } from '../gateway/GatewayContext';\nimport logger from '../logger';\n// eslint-disable-next-line import/prefer-default-export\nexport const chainImplementation = ({ clusterUrl, publicKey, signTransaction, gatekeeperNetworkAddress, stage, }) => {\n    logger.debug('Connecting to cluster with commitment recent', clusterUrl);\n    const connection = new Connection(clusterUrl, 'processed');\n    return {\n        addOnGatewayTokenChangeListener: (gatewayToken, tokenDidChange) => {\n            return onGatewayTokenChange(connection, new PublicKey(gatewayToken.identifier), (token) => {\n                tokenDidChange({\n                    issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n                    gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n                    owner: token.owner.toBase58(),\n                    state: State[token.state],\n                    identifier: token.publicKey.toBase58(),\n                    expiryTime: token.expiryTime,\n                });\n            });\n        },\n        removeOnGatewayTokenChangeListener: (listenerId) => {\n            removeAccountChangeListener(connection, listenerId);\n        },\n        findGatewayToken: async () => {\n            const [onChainToken] = (await findGatewayTokens(connection, publicKey, new PublicKey(gatekeeperNetworkAddress), true)) || [];\n            if (!onChainToken)\n                return undefined;\n            return {\n                issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n                gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n                owner: onChainToken.owner.toBase58(),\n                state: State[onChainToken.state],\n                identifier: onChainToken.publicKey.toBase58(),\n                expiryTime: onChainToken.expiryTime,\n            };\n        },\n        proveWalletOwnership: async () => {\n            const result = await prove(publicKey, signTransaction, makeConfig(clusterUrl));\n            return result.toString('base64');\n        },\n        chainType: ChainType.SOLANA,\n        httpConfig: {\n            baseUrl: getGatekeeperEndpoint(stage),\n            queryParams: { network: urlToCluster(clusterUrl) },\n        },\n    };\n};\nexport const useSolanaGateway = () => {\n    const { gatewayToken } = useGateway();\n    const solanaGatewayToken = gatewayToken\n        ? {\n            issuingGatekeeper: new PublicKey(gatewayToken.issuingGatekeeper),\n            gatekeeperNetworkAddress: new PublicKey(gatewayToken.gatekeeperNetworkAddress),\n            owner: new PublicKey(gatewayToken.owner),\n            state: gatewayToken.state,\n            publicKey: new PublicKey(gatewayToken.identifier),\n            expiryTime: gatewayToken.expiryTime,\n        }\n        : undefined;\n    return Object.assign(Object.assign({}, useGateway()), { gatewayToken: solanaGatewayToken });\n};\n"]},"metadata":{},"sourceType":"module"}