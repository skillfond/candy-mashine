{"ast":null,"code":"import _asyncToGenerator from \"F:\\\\SitePortfolio\\\\skillfond\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _defineProperty from \"F:\\\\SitePortfolio\\\\skillfond\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\n\nvar _gatewayStatusToCivic;\n\nimport _regeneratorRuntime from \"F:\\\\SitePortfolio\\\\skillfond\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { useEffect } from 'react';\nimport logger from '../logger';\nimport { CivicPassIssuanceStatus, CivicPassMessageAction, CivicPassMessageEventResult, GatekeeperRecordState, GatewayStatus, RefreshTokenState } from '../types';\nimport { getCivicPassEndpoint } from '../config';\nimport { resetState, statusFromToken } from '../useReducer/utils';\nvar gatewayStatusToCivicPassAction = (_gatewayStatusToCivic = {}, _defineProperty(_gatewayStatusToCivic, GatewayStatus.PROOF_OF_WALLET_OWNERSHIP, CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP), _defineProperty(_gatewayStatusToCivic, GatewayStatus.NOT_REQUESTED, CivicPassMessageAction.ISSUANCE), _defineProperty(_gatewayStatusToCivic, GatewayStatus.IN_REVIEW, CivicPassMessageAction.TOKEN_IN_REVIEW), _defineProperty(_gatewayStatusToCivic, GatewayStatus.ERROR, CivicPassMessageAction.ISSUANCE), _defineProperty(_gatewayStatusToCivic, GatewayStatus.ACTIVE, CivicPassMessageAction.TOKEN_ACTIVE), _defineProperty(_gatewayStatusToCivic, GatewayStatus.REVOKED, CivicPassMessageAction.TOKEN_REVOKED), _defineProperty(_gatewayStatusToCivic, GatewayStatus.FROZEN, CivicPassMessageAction.TOKEN_FROZEN), _defineProperty(_gatewayStatusToCivic, GatewayStatus.REJECTED, CivicPassMessageAction.TOKEN_REJECTED), _defineProperty(_gatewayStatusToCivic, GatewayStatus.LOCATION_NOT_SUPPORTED, CivicPassMessageAction.FAILED_IP_CHECK), _defineProperty(_gatewayStatusToCivic, GatewayStatus.REFRESH_TOKEN_REQUIRED, CivicPassMessageAction.REFRESH), _defineProperty(_gatewayStatusToCivic, GatewayStatus.FAILED, CivicPassMessageAction.ISSUANCE), _gatewayStatusToCivic);\n\nvar logDebug = function logDebug(message) {\n  var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return logger.debug(\"[useCivicPass] \".concat(message), obj);\n};\n\nvar logError = function logError(message) {\n  var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return logger.error(\"[useCivicPass] \".concat(message), obj);\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\nvar getCivicPassSrcUrl = function getCivicPassSrcUrl(state, status) {\n  var redirectUrl = state.redirectUrl,\n      gatekeeperNetworkAddress = state.gatekeeperNetworkAddress,\n      stage = state.stage,\n      walletAddress = state.walletAddress,\n      civicPass = state.civicPass,\n      chainType = state.chainType;\n\n  if (!gatekeeperNetworkAddress || !walletAddress) {\n    logError('Required properties not present', {\n      gatekeeperNetworkAddress: gatekeeperNetworkAddress,\n      walletAddress: walletAddress\n    });\n    throw new Error(\"Required properties not present \".concat({\n      gatekeeperNetworkAddress: gatekeeperNetworkAddress,\n      walletAddress: walletAddress\n    }));\n  }\n\n  var civicPassSrcUrl = getCivicPassEndpoint(stage);\n  var url = new URL(civicPassSrcUrl);\n  var action = gatewayStatusToCivicPassAction[status];\n  var searchParams = new URLSearchParams(Object.assign(Object.assign({}, civicPass.requestPayload), {\n    redirectUrl: redirectUrl,\n    networkAddress: gatekeeperNetworkAddress,\n    action: action,\n    wallet: walletAddress,\n    chain: chainType\n  }));\n  logDebug('Civic pass query params', {\n    searchParams: searchParams.toString(),\n    gatewayStatus: GatewayStatus[status]\n  });\n  return \"\".concat(url.href, \"?\").concat(searchParams.toString());\n};\n\nexport var reducer = function reducer(state, action) {\n  var _a;\n\n  switch (action.type) {\n    case 'civicPass_check_token_status':\n      {\n        return Object.assign(Object.assign({}, state), {\n          tokenRequested: true,\n          iframeMinimized: !((_a = state.options) === null || _a === void 0 ? void 0 : _a.autoShowModal),\n          renderIframe: true,\n          iframeSrcUrl: state.civicPass.status === CivicPassIssuanceStatus.REQUESTED ? state.iframeSrcUrl : getCivicPassSrcUrl(state, statusFromToken(state, action.token))\n        });\n      }\n\n    case 'userInteraction_check_gatewayToken_status':\n      {\n        return Object.assign(Object.assign({}, state), {\n          tokenRequested: true,\n          iframeMinimized: false,\n          renderIframe: true,\n          iframeSrcUrl: state.civicPass.status === CivicPassIssuanceStatus.REQUESTED ? state.iframeSrcUrl : getCivicPassSrcUrl(state, statusFromToken(state, action.token))\n        });\n      }\n\n    case 'civicPass_close':\n      return Object.assign({}, state.civicPass.status === CivicPassIssuanceStatus.REQUESTED ? Object.assign(Object.assign({}, state), {\n        iframeMinimized: true,\n        renderIframe: true\n      }) : Object.assign(Object.assign({}, state), {\n        iframeMinimized: true,\n        renderIframe: false\n      }));\n\n    case 'civicPass_in_progress':\n      {\n        return Object.assign(Object.assign({}, state), {\n          gatewayStatus: GatewayStatus.COLLECTING_USER_INFORMATION,\n          renderIframe: true,\n          iframeMinimized: false,\n          civicPass: Object.assign(Object.assign({}, state.civicPass), {\n            status: CivicPassIssuanceStatus.REQUESTED\n          })\n        });\n      }\n\n    case 'civicPass_issuance_success':\n      {\n        var _action$payload = action.payload,\n            payload = _action$payload.payload,\n            requiresProofOfWalletOwnership = _action$payload.requiresProofOfWalletOwnership;\n        var gatewayStatus = requiresProofOfWalletOwnership ? GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : GatewayStatus.IN_REVIEW;\n        return Object.assign(Object.assign({}, state), {\n          gatewayStatus: gatewayStatus,\n          renderIframe: true,\n          iframeMinimized: false,\n          powoRequested: 'solana',\n          iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus),\n          civicPass: Object.assign(Object.assign({}, state.civicPass), {\n            status: CivicPassIssuanceStatus.VERIFIED,\n            responsePayload: _defineProperty({}, CivicPassMessageAction.ISSUANCE, {\n              payload: payload,\n              requiresProofOfWalletOwnership: requiresProofOfWalletOwnership\n            })\n          })\n        });\n      }\n\n    case 'civicPass_issuance_failure':\n      return Object.assign(Object.assign({}, resetState(state)), {\n        gatewayStatus: GatewayStatus.FAILED\n      });\n\n    case 'civicPass_issuance_cancelled':\n      return Object.assign(Object.assign({}, resetState(state)), {\n        gatewayStatus: GatewayStatus.NOT_REQUESTED\n      });\n\n    case 'civicPass_refresh_success':\n      {\n        var _action$payload2 = action.payload,\n            _payload = _action$payload2.payload,\n            _requiresProofOfWalletOwnership = _action$payload2.requiresProofOfWalletOwnership;\n\n        var _gatewayStatus = _requiresProofOfWalletOwnership ? GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : GatewayStatus.IN_REVIEW;\n\n        return Object.assign(Object.assign({}, state), {\n          gatewayStatus: _gatewayStatus,\n          renderIframe: true,\n          iframeMinimized: false,\n          iframeSrcUrl: getCivicPassSrcUrl(state, _gatewayStatus),\n          refreshTokenState: RefreshTokenState.IN_PROGRESS,\n          civicPass: Object.assign(Object.assign({}, state.civicPass), {\n            responsePayload: _defineProperty({}, CivicPassMessageAction.REFRESH, {\n              payload: _payload,\n              requiresProofOfWalletOwnership: _requiresProofOfWalletOwnership\n            })\n          })\n        });\n      }\n\n    case 'civicPass_refresh_cancelled':\n      return Object.assign(Object.assign({}, resetState(state)), {\n        refreshTokenState: RefreshTokenState.CANCELLED,\n        gatewayStatus: GatewayStatus.REFRESH_TOKEN_REQUIRED\n      });\n\n    case 'civicPass_refresh_failure':\n      return Object.assign(Object.assign({}, resetState(state)), {\n        refreshTokenState: RefreshTokenState.FAILED,\n        gatewayStatus: GatewayStatus.FAILED\n      });\n\n    case 'civicPass_location_not_supported':\n      return Object.assign(Object.assign({}, state), {\n        iframeMinimized: true,\n        renderIframe: false,\n        gatewayStatus: state.gatewayStatus,\n        refreshTokenState: state.gatekeeperRecordState === GatekeeperRecordState.ISSUED_LOCATION_NOT_SUPPORTED ? RefreshTokenState.REQUIRES_POWO : state.refreshTokenState\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar useCivicPass = function useCivicPass(_ref, state, dispatch) {\n  var wallet = _ref.wallet;\n  var gatekeeperRecordState = state.gatekeeperRecordState;\n\n  var getActionForIssuanceResponse = function getActionForIssuanceResponse(response) {\n    var _actions;\n\n    var actions = (_actions = {}, _defineProperty(_actions, CivicPassMessageEventResult.SUCCESS, {\n      type: 'civicPass_issuance_success',\n      payload: response\n    }), _defineProperty(_actions, CivicPassMessageEventResult.FAILURE, {\n      type: 'civicPass_issuance_failure'\n    }), _defineProperty(_actions, CivicPassMessageEventResult.CANCELLED, {\n      type: 'civicPass_issuance_cancelled'\n    }), _defineProperty(_actions, CivicPassMessageEventResult.IN_PROGRESS, {\n      type: 'civicPass_in_progress'\n    }), _actions);\n    return actions[response.event];\n  };\n\n  var getActionForRefreshResponse = function getActionForRefreshResponse(response) {\n    var _actions2;\n\n    var actions = (_actions2 = {}, _defineProperty(_actions2, CivicPassMessageEventResult.SUCCESS, {\n      type: 'civicPass_refresh_success',\n      payload: response\n    }), _defineProperty(_actions2, CivicPassMessageEventResult.CANCELLED, {\n      type: 'civicPass_refresh_cancelled'\n    }), _defineProperty(_actions2, CivicPassMessageEventResult.FAILURE, {\n      type: 'civicPass_refresh_failure'\n    }), _actions2);\n    return actions[response.event];\n  };\n\n  var getActionForPowoResponse = function getActionForPowoResponse(response) {\n    var actions = _defineProperty({}, CivicPassMessageEventResult.SUCCESS, {\n      type: 'powoComplete'\n    });\n\n    return actions[response.event];\n  };\n\n  var getActionForLocationNotSupportedResponse = function getActionForLocationNotSupportedResponse(response) {\n    var actions = _defineProperty({}, CivicPassMessageEventResult.SUCCESS, {\n      type: 'civicPass_location_not_supported'\n    });\n\n    return actions[response.event];\n  };\n\n  var getActionForStaticResponse = function getActionForStaticResponse(response) {\n    var actions = _defineProperty({}, CivicPassMessageEventResult.SUCCESS, {\n      type: 'civicPass_close'\n    });\n\n    return actions[response.event];\n  };\n\n  var dispatchComplianceEventResult = function dispatchComplianceEventResult(response) {\n    var _actions6;\n\n    var actions = (_actions6 = {}, _defineProperty(_actions6, CivicPassMessageAction.ISSUANCE, getActionForIssuanceResponse(response)), _defineProperty(_actions6, CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP, getActionForPowoResponse(response)), _defineProperty(_actions6, CivicPassMessageAction.TOKEN_IN_REVIEW, getActionForStaticResponse(response)), _defineProperty(_actions6, CivicPassMessageAction.TOKEN_ACTIVE, getActionForStaticResponse(response)), _defineProperty(_actions6, CivicPassMessageAction.TOKEN_FROZEN, getActionForStaticResponse(response)), _defineProperty(_actions6, CivicPassMessageAction.TOKEN_REJECTED, getActionForStaticResponse(response)), _defineProperty(_actions6, CivicPassMessageAction.TOKEN_REVOKED, getActionForStaticResponse(response)), _defineProperty(_actions6, CivicPassMessageAction.FAILED_IP_CHECK, getActionForLocationNotSupportedResponse(response)), _defineProperty(_actions6, CivicPassMessageAction.REFRESH, getActionForRefreshResponse(response)), _actions6);\n    var action = actions[response.action];\n\n    if (action) {\n      logDebug('Successfully processed compliance event with action', action);\n      dispatch(action);\n    }\n  };\n  /**\n   * Listen for post messages from the compliance iframe and dispatch events\n   * based on the event type\n   */\n\n\n  useEffect(function () {\n    if (wallet && wallet.publicKey) {\n      logDebug('Current state', state);\n\n      var handler = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  dispatchComplianceEventResult(response.data);\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function handler(_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      window.addEventListener('message', handler);\n      return function () {\n        logDebug('Removing event listener for compliance');\n        return window.removeEventListener('message', handler);\n      };\n    }\n\n    return function () {};\n  }, []);\n  /**\n   * We do not have a token and user is connecting from an unsupported country,\n   * so we show the country not supported screen\n   */\n\n  useEffect(function () {\n    if (gatekeeperRecordState === GatekeeperRecordState.LOCATION_NOT_SUPPORTED) {\n      dispatch({\n        type: 'civicPass_check_token_status'\n      });\n    }\n  }, [gatekeeperRecordState]);\n  return {\n    dispatchComplianceEventResult: dispatchComplianceEventResult\n  };\n};\n\nexport default useCivicPass;","map":{"version":3,"sources":["F:/SitePortfolio/skillfond/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/useCivicPass.js"],"names":["useEffect","logger","CivicPassIssuanceStatus","CivicPassMessageAction","CivicPassMessageEventResult","GatekeeperRecordState","GatewayStatus","RefreshTokenState","getCivicPassEndpoint","resetState","statusFromToken","gatewayStatusToCivicPassAction","PROOF_OF_WALLET_OWNERSHIP","NOT_REQUESTED","ISSUANCE","IN_REVIEW","TOKEN_IN_REVIEW","ERROR","ACTIVE","TOKEN_ACTIVE","REVOKED","TOKEN_REVOKED","FROZEN","TOKEN_FROZEN","REJECTED","TOKEN_REJECTED","LOCATION_NOT_SUPPORTED","FAILED_IP_CHECK","REFRESH_TOKEN_REQUIRED","REFRESH","FAILED","logDebug","message","obj","debug","logError","error","getCivicPassSrcUrl","state","status","redirectUrl","gatekeeperNetworkAddress","stage","walletAddress","civicPass","chainType","Error","civicPassSrcUrl","url","URL","action","searchParams","URLSearchParams","Object","assign","requestPayload","networkAddress","wallet","chain","toString","gatewayStatus","href","reducer","_a","type","tokenRequested","iframeMinimized","options","autoShowModal","renderIframe","iframeSrcUrl","REQUESTED","token","COLLECTING_USER_INFORMATION","payload","requiresProofOfWalletOwnership","powoRequested","VERIFIED","responsePayload","refreshTokenState","IN_PROGRESS","CANCELLED","gatekeeperRecordState","ISSUED_LOCATION_NOT_SUPPORTED","REQUIRES_POWO","useCivicPass","dispatch","getActionForIssuanceResponse","response","actions","SUCCESS","FAILURE","event","getActionForRefreshResponse","getActionForPowoResponse","getActionForLocationNotSupportedResponse","getActionForStaticResponse","dispatchComplianceEventResult","publicKey","handler","data","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport logger from '../logger';\nimport { CivicPassIssuanceStatus, CivicPassMessageAction, CivicPassMessageEventResult, GatekeeperRecordState, GatewayStatus, RefreshTokenState, } from '../types';\nimport { getCivicPassEndpoint } from '../config';\nimport { resetState, statusFromToken } from '../useReducer/utils';\nconst gatewayStatusToCivicPassAction = {\n    [GatewayStatus.PROOF_OF_WALLET_OWNERSHIP]: CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP,\n    [GatewayStatus.NOT_REQUESTED]: CivicPassMessageAction.ISSUANCE,\n    [GatewayStatus.IN_REVIEW]: CivicPassMessageAction.TOKEN_IN_REVIEW,\n    [GatewayStatus.ERROR]: CivicPassMessageAction.ISSUANCE,\n    [GatewayStatus.ACTIVE]: CivicPassMessageAction.TOKEN_ACTIVE,\n    [GatewayStatus.REVOKED]: CivicPassMessageAction.TOKEN_REVOKED,\n    [GatewayStatus.FROZEN]: CivicPassMessageAction.TOKEN_FROZEN,\n    [GatewayStatus.REJECTED]: CivicPassMessageAction.TOKEN_REJECTED,\n    [GatewayStatus.LOCATION_NOT_SUPPORTED]: CivicPassMessageAction.FAILED_IP_CHECK,\n    [GatewayStatus.REFRESH_TOKEN_REQUIRED]: CivicPassMessageAction.REFRESH,\n    [GatewayStatus.FAILED]: CivicPassMessageAction.ISSUANCE,\n};\nconst logDebug = (message, obj = null) => logger.debug(`[useCivicPass] ${message}`, obj);\nconst logError = (message, obj = null) => logger.error(`[useCivicPass] ${message}`, obj);\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst getCivicPassSrcUrl = (state, status) => {\n    const { redirectUrl, gatekeeperNetworkAddress, stage, walletAddress, civicPass, chainType } = state;\n    if (!gatekeeperNetworkAddress || !walletAddress) {\n        logError('Required properties not present', { gatekeeperNetworkAddress, walletAddress });\n        throw new Error(`Required properties not present ${{ gatekeeperNetworkAddress, walletAddress }}`);\n    }\n    const civicPassSrcUrl = getCivicPassEndpoint(stage);\n    const url = new URL(civicPassSrcUrl);\n    const action = gatewayStatusToCivicPassAction[status];\n    const searchParams = new URLSearchParams(Object.assign(Object.assign({}, civicPass.requestPayload), { redirectUrl, networkAddress: gatekeeperNetworkAddress, action, wallet: walletAddress, chain: chainType }));\n    logDebug('Civic pass query params', { searchParams: searchParams.toString(), gatewayStatus: GatewayStatus[status] });\n    return `${url.href}?${searchParams.toString()}`;\n};\nexport const reducer = (state, action) => {\n    var _a;\n    switch (action.type) {\n        case 'civicPass_check_token_status': {\n            return Object.assign(Object.assign({}, state), { tokenRequested: true, iframeMinimized: !((_a = state.options) === null || _a === void 0 ? void 0 : _a.autoShowModal), renderIframe: true, iframeSrcUrl: state.civicPass.status === CivicPassIssuanceStatus.REQUESTED\n                    ? state.iframeSrcUrl\n                    : getCivicPassSrcUrl(state, statusFromToken(state, action.token)) });\n        }\n        case 'userInteraction_check_gatewayToken_status': {\n            return Object.assign(Object.assign({}, state), { tokenRequested: true, iframeMinimized: false, renderIframe: true, iframeSrcUrl: state.civicPass.status === CivicPassIssuanceStatus.REQUESTED\n                    ? state.iframeSrcUrl\n                    : getCivicPassSrcUrl(state, statusFromToken(state, action.token)) });\n        }\n        case 'civicPass_close':\n            return Object.assign({}, (state.civicPass.status === CivicPassIssuanceStatus.REQUESTED\n                ? Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: true }) : Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: false })));\n        case 'civicPass_in_progress': {\n            return Object.assign(Object.assign({}, state), { gatewayStatus: GatewayStatus.COLLECTING_USER_INFORMATION, renderIframe: true, iframeMinimized: false, civicPass: Object.assign(Object.assign({}, state.civicPass), { status: CivicPassIssuanceStatus.REQUESTED }) });\n        }\n        case 'civicPass_issuance_success': {\n            const { payload, requiresProofOfWalletOwnership } = action.payload;\n            const gatewayStatus = requiresProofOfWalletOwnership\n                ? GatewayStatus.PROOF_OF_WALLET_OWNERSHIP\n                : GatewayStatus.IN_REVIEW;\n            return Object.assign(Object.assign({}, state), { gatewayStatus, renderIframe: true, iframeMinimized: false, powoRequested: 'solana', iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus), civicPass: Object.assign(Object.assign({}, state.civicPass), { status: CivicPassIssuanceStatus.VERIFIED, responsePayload: {\n                        [CivicPassMessageAction.ISSUANCE]: {\n                            payload,\n                            requiresProofOfWalletOwnership,\n                        },\n                    } }) });\n        }\n        case 'civicPass_issuance_failure':\n            return Object.assign(Object.assign({}, resetState(state)), { gatewayStatus: GatewayStatus.FAILED });\n        case 'civicPass_issuance_cancelled':\n            return Object.assign(Object.assign({}, resetState(state)), { gatewayStatus: GatewayStatus.NOT_REQUESTED });\n        case 'civicPass_refresh_success': {\n            const { payload, requiresProofOfWalletOwnership } = action.payload;\n            const gatewayStatus = requiresProofOfWalletOwnership\n                ? GatewayStatus.PROOF_OF_WALLET_OWNERSHIP\n                : GatewayStatus.IN_REVIEW;\n            return Object.assign(Object.assign({}, state), { gatewayStatus, renderIframe: true, iframeMinimized: false, iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus), refreshTokenState: RefreshTokenState.IN_PROGRESS, civicPass: Object.assign(Object.assign({}, state.civicPass), { responsePayload: {\n                        [CivicPassMessageAction.REFRESH]: {\n                            payload,\n                            requiresProofOfWalletOwnership,\n                        },\n                    } }) });\n        }\n        case 'civicPass_refresh_cancelled':\n            return Object.assign(Object.assign({}, resetState(state)), { refreshTokenState: RefreshTokenState.CANCELLED, gatewayStatus: GatewayStatus.REFRESH_TOKEN_REQUIRED });\n        case 'civicPass_refresh_failure':\n            return Object.assign(Object.assign({}, resetState(state)), { refreshTokenState: RefreshTokenState.FAILED, gatewayStatus: GatewayStatus.FAILED });\n        case 'civicPass_location_not_supported':\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: false, gatewayStatus: state.gatewayStatus, refreshTokenState: state.gatekeeperRecordState === GatekeeperRecordState.ISSUED_LOCATION_NOT_SUPPORTED\n                    ? RefreshTokenState.REQUIRES_POWO\n                    : state.refreshTokenState });\n        default:\n            return state;\n    }\n};\nconst useCivicPass = ({ wallet }, state, dispatch) => {\n    const { gatekeeperRecordState } = state;\n    const getActionForIssuanceResponse = (response) => {\n        const actions = {\n            [CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_issuance_success',\n                payload: response,\n            },\n            [CivicPassMessageEventResult.FAILURE]: {\n                type: 'civicPass_issuance_failure',\n            },\n            [CivicPassMessageEventResult.CANCELLED]: {\n                type: 'civicPass_issuance_cancelled',\n            },\n            [CivicPassMessageEventResult.IN_PROGRESS]: {\n                type: 'civicPass_in_progress',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForRefreshResponse = (response) => {\n        const actions = {\n            [CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_refresh_success',\n                payload: response,\n            },\n            [CivicPassMessageEventResult.CANCELLED]: {\n                type: 'civicPass_refresh_cancelled',\n            },\n            [CivicPassMessageEventResult.FAILURE]: {\n                type: 'civicPass_refresh_failure',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForPowoResponse = (response) => {\n        const actions = {\n            [CivicPassMessageEventResult.SUCCESS]: {\n                type: 'powoComplete',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForLocationNotSupportedResponse = (response) => {\n        const actions = {\n            [CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_location_not_supported',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForStaticResponse = (response) => {\n        const actions = {\n            [CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_close',\n            },\n        };\n        return actions[response.event];\n    };\n    const dispatchComplianceEventResult = (response) => {\n        const actions = {\n            [CivicPassMessageAction.ISSUANCE]: getActionForIssuanceResponse(response),\n            [CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP]: getActionForPowoResponse(response),\n            [CivicPassMessageAction.TOKEN_IN_REVIEW]: getActionForStaticResponse(response),\n            [CivicPassMessageAction.TOKEN_ACTIVE]: getActionForStaticResponse(response),\n            [CivicPassMessageAction.TOKEN_FROZEN]: getActionForStaticResponse(response),\n            [CivicPassMessageAction.TOKEN_REJECTED]: getActionForStaticResponse(response),\n            [CivicPassMessageAction.TOKEN_REVOKED]: getActionForStaticResponse(response),\n            [CivicPassMessageAction.FAILED_IP_CHECK]: getActionForLocationNotSupportedResponse(response),\n            [CivicPassMessageAction.REFRESH]: getActionForRefreshResponse(response),\n        };\n        const action = actions[response.action];\n        if (action) {\n            logDebug('Successfully processed compliance event with action', action);\n            dispatch(action);\n        }\n    };\n    /**\n     * Listen for post messages from the compliance iframe and dispatch events\n     * based on the event type\n     */\n    useEffect(() => {\n        if (wallet && wallet.publicKey) {\n            logDebug('Current state', state);\n            const handler = async (response) => {\n                dispatchComplianceEventResult(response.data);\n            };\n            window.addEventListener('message', handler);\n            return () => {\n                logDebug('Removing event listener for compliance');\n                return window.removeEventListener('message', handler);\n            };\n        }\n        return () => { };\n    }, []);\n    /**\n     * We do not have a token and user is connecting from an unsupported country,\n     * so we show the country not supported screen\n     */\n    useEffect(() => {\n        if (gatekeeperRecordState === GatekeeperRecordState.LOCATION_NOT_SUPPORTED) {\n            dispatch({ type: 'civicPass_check_token_status' });\n        }\n    }, [gatekeeperRecordState]);\n    return { dispatchComplianceEventResult };\n};\nexport default useCivicPass;\n"]},"metadata":{},"sourceType":"module"}