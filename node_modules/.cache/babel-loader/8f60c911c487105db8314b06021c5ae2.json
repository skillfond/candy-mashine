{"ast":null,"code":"import logger from '../logger';\nexport const sleep = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\nexport const pollUntilConditionMet = async function (fnToRun, conditionChecker) {\n  let interval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2000;\n  let retries = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;\n\n  if (retries <= 0) {\n    logger.debug('WaitForStatusChange - no more retries');\n    throw new Error(`pollUntilConditionMet all retries used calling ${fnToRun}`);\n  }\n\n  logger.debug(`calling ${fnToRun.name} retries = ${retries}`);\n  const result = await fnToRun();\n\n  if (conditionChecker(result)) {\n    return result;\n  }\n\n  logger.debug(`Waiting ${interval}ms before running ${fnToRun.name} and checking condition ${conditionChecker}`);\n  await sleep(interval);\n  return pollUntilConditionMet(fnToRun, conditionChecker, interval, retries - 1);\n};","map":{"version":3,"sources":["F:/SitePortfolio/skillfond/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/actionCreator/utils.js"],"names":["logger","sleep","ms","Promise","resolve","setTimeout","pollUntilConditionMet","fnToRun","conditionChecker","interval","retries","debug","Error","name","result"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAO,MAAMC,KAAK,GAAIC,EAAD,IAAQ;AACzB,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAnC,CAAP;AACH,CAFM;AAGP,OAAO,MAAMI,qBAAqB,GAAG,gBAAOC,OAAP,EAAgBC,gBAAhB,EAAoE;AAAA,MAAlCC,QAAkC,uEAAvB,IAAuB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AACrG,MAAIA,OAAO,IAAI,CAAf,EAAkB;AACdV,IAAAA,MAAM,CAACW,KAAP,CAAa,uCAAb;AACA,UAAM,IAAIC,KAAJ,CAAW,kDAAiDL,OAAQ,EAApE,CAAN;AACH;;AACDP,EAAAA,MAAM,CAACW,KAAP,CAAc,WAAUJ,OAAO,CAACM,IAAK,cAAaH,OAAQ,EAA1D;AACA,QAAMI,MAAM,GAAI,MAAMP,OAAO,EAA7B;;AACA,MAAIC,gBAAgB,CAACM,MAAD,CAApB,EAA8B;AAC1B,WAAOA,MAAP;AACH;;AACDd,EAAAA,MAAM,CAACW,KAAP,CAAc,WAAUF,QAAS,qBAAoBF,OAAO,CAACM,IAAK,2BAA0BL,gBAAiB,EAA7G;AACA,QAAMP,KAAK,CAACQ,QAAD,CAAX;AACA,SAAOH,qBAAqB,CAACC,OAAD,EAAUC,gBAAV,EAA4BC,QAA5B,EAAsCC,OAAO,GAAG,CAAhD,CAA5B;AACH,CAbM","sourcesContent":["import logger from '../logger';\nexport const sleep = (ms) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n};\nexport const pollUntilConditionMet = async (fnToRun, conditionChecker, interval = 2000, retries = 20) => {\n    if (retries <= 0) {\n        logger.debug('WaitForStatusChange - no more retries');\n        throw new Error(`pollUntilConditionMet all retries used calling ${fnToRun}`);\n    }\n    logger.debug(`calling ${fnToRun.name} retries = ${retries}`);\n    const result = (await fnToRun());\n    if (conditionChecker(result)) {\n        return result;\n    }\n    logger.debug(`Waiting ${interval}ms before running ${fnToRun.name} and checking condition ${conditionChecker}`);\n    await sleep(interval);\n    return pollUntilConditionMet(fnToRun, conditionChecker, interval, retries - 1);\n};\n"]},"metadata":{},"sourceType":"module"}