{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gatekeeperExists = exports.getGatewayToken = exports.removeAccountChangeListener = exports.onGatewayTokenChange = exports.findGatewayToken = exports.findGatewayTokens = exports.dataToGatewayToken = exports.getGatewayTokenKeyForOwner = exports.getGatekeeperAccountKey = exports.proxyConnectionWithRetry = exports.runFunctionWithRetry = exports.defaultRetryConfig = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_1 = require(\"./constants\");\n\nconst types_1 = require(\"../types\");\n\nconst GatewayTokenData_1 = require(\"./GatewayTokenData\");\n\nconst async_retry_1 = __importDefault(require(\"async-retry\"));\n\nconst R = __importStar(require(\"ramda\"));\n\nexports.defaultRetryConfig = {\n  retryCount: constants_1.DEFAULT_SOLANA_RETRIES,\n  exponentialFactor: 2,\n  timeouts: {\n    processed: constants_1.SOLANA_TIMEOUT_PROCESSED,\n    confirmed: constants_1.SOLANA_TIMEOUT_CONFIRMED,\n    finalized: constants_1.SOLANA_TIMEOUT_FINALIZED\n  }\n};\n\nconst runFunctionWithRetry = (methodName, // for logging purposes so we know which call this was\nfn, commitment, customRetryConfig) => __awaiter(void 0, void 0, void 0, function* () {\n  const retryConfig = Object.assign(Object.assign({}, exports.defaultRetryConfig), customRetryConfig);\n  let timeout = R.path([\"timeouts\", commitment], retryConfig) || retryConfig.timeouts.confirmed; //Â If we have any bugs before this point, this is the final safeguard against undefined retry config values.\n  // TODO IDCOM-1558 Improve the type safety of config to avoid the need for checks such as this.\n\n  let retryCount = retryConfig.retryCount;\n  let expFactor = retryConfig.exponentialFactor;\n\n  if (!retryCount) {\n    console.error(`retryCount not set in Solana connection proxy. Defaulting to ${constants_1.DEFAULT_SOLANA_RETRIES}`);\n    retryCount = constants_1.DEFAULT_SOLANA_RETRIES;\n  }\n\n  if (!expFactor) {\n    console.error(\"exponentialFactor not set in Solana connection proxy. Defaulting to 2\");\n    retryCount = 2;\n  }\n\n  if (!timeout) {\n    console.error(`timeout not set in Solana connection proxy. Defaulting to ${constants_1.SOLANA_TIMEOUT_CONFIRMED}`);\n    timeout = constants_1.SOLANA_TIMEOUT_CONFIRMED;\n  }\n\n  let currentAttempt = 0;\n\n  try {\n    return yield (0, async_retry_1.default)(() => __awaiter(void 0, void 0, void 0, function* () {\n      currentAttempt++;\n      console.log(`Trying Solana connection method '${methodName}' (attempt ${currentAttempt} of ${retryConfig.retryCount + 1})`, {\n        timeout\n      });\n      const timeoutPromise = new Promise((_resolve, reject) => setTimeout(() => reject(new Error(\"timeout\")), timeout));\n      const blockchainPromise = fn();\n      return Promise.race([blockchainPromise, timeoutPromise]);\n    }), {\n      retries: retryCount,\n      factor: expFactor\n    });\n  } catch (err) {\n    console.error(`Retries exhausted in Solana connection method '${methodName}' .`, {\n      error: err\n    });\n    throw err;\n  }\n});\n\nexports.runFunctionWithRetry = runFunctionWithRetry;\n\nconst proxyConnectionWithRetry = function (originalConnection) {\n  let customRetryConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.defaultRetryConfig;\n  const proxyHandler = {\n    get(target, propKey, receiver) {\n      switch (propKey) {\n        case \"sendTransaction\":\n          return (transaction, signers, options) => {\n            const fn = () => __awaiter(this, void 0, void 0, function* () {\n              return target.sendTransaction(transaction, signers, options);\n            });\n\n            return (0, exports.runFunctionWithRetry)(\"sendTransaction\", fn, constants_1.SOLANA_COMMITMENT, customRetryConfig);\n          };\n\n        case \"confirmTransaction\":\n          return (signature, commitment) => {\n            const fn = () => __awaiter(this, void 0, void 0, function* () {\n              return target.confirmTransaction(signature, commitment);\n            });\n\n            return (0, exports.runFunctionWithRetry)(\"confirmTransaction\", fn, constants_1.SOLANA_COMMITMENT, customRetryConfig);\n          };\n\n        case \"getProgramAccounts\":\n          return (programId, configOrCommitment) => {\n            const fn = () => __awaiter(this, void 0, void 0, function* () {\n              return target.getProgramAccounts(programId, configOrCommitment);\n            });\n\n            return (0, exports.runFunctionWithRetry)(\"getProgramAccounts\", fn, constants_1.SOLANA_COMMITMENT, customRetryConfig);\n          };\n\n        case \"getAccountInfo\":\n          return (publicKey, commitment) => {\n            const fn = () => __awaiter(this, void 0, void 0, function* () {\n              return target.getAccountInfo(publicKey, commitment);\n            });\n\n            return (0, exports.runFunctionWithRetry)(\"getAccountInfo\", fn, constants_1.SOLANA_COMMITMENT, customRetryConfig);\n          };\n\n        default:\n          // Return the original property unchanged:\n          return Reflect.get(target, propKey, receiver);\n      }\n    },\n\n    apply(target, thisArg, argumentsList) {\n      const fn = () => __awaiter(this, void 0, void 0, function* () {\n        return target.apply(thisArg, argumentsList);\n      });\n\n      return (0, exports.runFunctionWithRetry)(\"apply\", fn, constants_1.SOLANA_COMMITMENT, customRetryConfig);\n    }\n\n  };\n  return new Proxy(originalConnection, proxyHandler);\n};\n\nexports.proxyConnectionWithRetry = proxyConnectionWithRetry;\n/**\n * Derive the address of the gatekeeper PDA for this gatekeeper\n * @param authority The gatekeeper\n * @param network The network\n */\n\nconst getGatekeeperAccountKey = (authority, network) => __awaiter(void 0, void 0, void 0, function* () {\n  const publicKeyNonce = yield web3_js_1.PublicKey.findProgramAddress([authority.toBuffer(), network.toBuffer(), Buffer.from(constants_1.GATEKEEPER_NONCE_SEED_STRING, \"utf8\")], constants_1.PROGRAM_ID);\n  return publicKeyNonce[0];\n});\n\nexports.getGatekeeperAccountKey = getGatekeeperAccountKey;\n/**\n * Derive the address of the gateway token PDA for this owner address and optional seed.\n * @param owner The owner of the gateway token\n * @param gatekeeperNetwork The network of the gateway token\n * @param seed An 8-byte seed array, used to add multiple tokens to the same owner. Must be unique to each token, if present\n */\n\nconst getGatewayTokenKeyForOwner = (owner, gatekeeperNetwork, seed) => __awaiter(void 0, void 0, void 0, function* () {\n  const additionalSeed = seed ? Buffer.from(seed) : Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]);\n\n  if (additionalSeed.length != 8) {\n    throw new Error(\"Additional Seed has length \" + additionalSeed.length + \" instead of 8 when calling getGatewayTokenKeyForOwner.\");\n  }\n\n  const seeds = [owner.toBuffer(), Buffer.from(constants_1.GATEWAY_TOKEN_ADDRESS_SEED, \"utf8\"), additionalSeed, gatekeeperNetwork.toBuffer()];\n  const publicKeyNonce = yield web3_js_1.PublicKey.findProgramAddress(seeds, constants_1.PROGRAM_ID);\n  return publicKeyNonce[0];\n});\n\nexports.getGatewayTokenKeyForOwner = getGatewayTokenKeyForOwner; // Based on solana/integration-lib/src/state.rs\n// If the optional the parent-gateway-token field is populated, this value will be\n// 34 (2 + 32) instead. TODO IDCOM-320 restructure the gateway token accounts to put\n// all optional values at the end of the struct to simplify account parsing a little\n\nconst GATEWAY_TOKEN_ACCOUNT_OWNER_FIELD_OFFSET = 2; // As above, if optional fields are present, this will differ. TODO IDCOM-320 fixes this\n\nconst GATEWAY_TOKEN_ACCOUNT_GATEKEEPER_NETWORK_FIELD_OFFSET = 35;\n\nfunction fromGatewayTokenState(state) {\n  if (!!state.active) return types_1.State.ACTIVE;\n  if (!!state.revoked) return types_1.State.REVOKED;\n  if (!!state.frozen) return types_1.State.FROZEN;\n  throw new Error(\"Unrecognised state \" + JSON.stringify(state));\n}\n\nconst dataToGatewayToken = (data, publicKey) => {\n  var _a;\n\n  return new types_1.GatewayToken(data.issuingGatekeeper.toPublicKey(), data.gatekeeperNetwork.toPublicKey(), data.owner.toPublicKey(), fromGatewayTokenState(data.state), publicKey, constants_1.PROGRAM_ID, (_a = data.expiry) === null || _a === void 0 ? void 0 : _a.toNumber());\n};\n\nexports.dataToGatewayToken = dataToGatewayToken;\n/**\n * Find all gateway tokens for a user on a gatekeeper network, optionally filtering out revoked tokens\n * @param connection A solana connection object\n * @param owner The token owner\n * @param gatekeeperNetwork The network to find a token for\n * @param {boolean=false} includeRevoked If false (default), filter out revoked tokens\n * @returns {Promise<GatewayToken[]>} All tokens for the owner\n */\n\nconst findGatewayTokens = function (connection, owner, gatekeeperNetwork) {\n  let includeRevoked = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    const ownerFilter = {\n      memcmp: {\n        offset: GATEWAY_TOKEN_ACCOUNT_OWNER_FIELD_OFFSET,\n        bytes: owner.toBase58()\n      }\n    };\n    const gatekeeperNetworkFilter = {\n      memcmp: {\n        offset: GATEWAY_TOKEN_ACCOUNT_GATEKEEPER_NETWORK_FIELD_OFFSET,\n        bytes: gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58()\n      }\n    };\n    const filters = [ownerFilter, gatekeeperNetworkFilter];\n    const accountsResponse = yield connection.getProgramAccounts(constants_1.PROGRAM_ID, {\n      filters\n    });\n    if (!accountsResponse) return [];\n\n    const toGatewayToken = _ref => {\n      let {\n        pubkey,\n        account\n      } = _ref;\n      return (0, exports.dataToGatewayToken)(GatewayTokenData_1.GatewayTokenData.fromAccount(account.data), pubkey);\n    };\n\n    return accountsResponse.map(toGatewayToken).filter(gatewayToken => gatewayToken.state !== types_1.State.REVOKED || includeRevoked);\n  });\n};\n\nexports.findGatewayTokens = findGatewayTokens;\n/**\n * Find any unrevoked token for a user on a gatekeeper network\n * @param connection A solana connection object\n * @param owner The token owner\n * @param gatekeeperNetwork The network to find a token for\n * @returns Promise<GatewayToken | null> An unrevoked token, if one exists for the owner\n */\n\nconst findGatewayToken = (connection, owner, gatekeeperNetwork) => __awaiter(void 0, void 0, void 0, function* () {\n  const tokens = yield (0, exports.findGatewayTokens)(connection, owner, gatekeeperNetwork, false);\n  if (tokens.length === 0) return null; // if any are valid, return the first one\n\n  const validTokens = tokens.filter(token => token.isValid());\n  if (validTokens.length > 0) return validTokens[0]; // if none is valid, return the first non-revoked one\n\n  const nonRevokedTokens = tokens.filter(token => token.state !== types_1.State.REVOKED);\n  return nonRevokedTokens.length === 0 ? null : nonRevokedTokens[0];\n});\n\nexports.findGatewayToken = findGatewayToken;\n/**\n * Register a callback to be called whenever a gateway token changes state\n * @param connection A solana connection object\n * @param gatewayTokenAddress The address of the gateway token\n * @param callback The callback to register\n * @param commitment The solana commitment level at which to register gateway token changes. Defaults to 'confirmed'\n * @return The subscription id\n */\n\nconst onGatewayTokenChange = function (connection, gatewayTokenAddress, callback) {\n  let commitment = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_1.SOLANA_COMMITMENT;\n\n  const accountCallback = accountInfo => {\n    const gatewayToken = (0, exports.dataToGatewayToken)(GatewayTokenData_1.GatewayTokenData.fromAccount(accountInfo.data), gatewayTokenAddress);\n    callback(gatewayToken);\n  };\n\n  return connection.onAccountChange(gatewayTokenAddress, accountCallback, commitment);\n};\n\nexports.onGatewayTokenChange = onGatewayTokenChange;\n/**\n * Stops listening to gateway state changes\n * @param connection A solana connection object\n * @param id The subscription id to deregister\n */\n\nconst removeAccountChangeListener = (connection, id) => connection.removeAccountChangeListener(id);\n\nexports.removeAccountChangeListener = removeAccountChangeListener;\n/**\n * Lookup the gateway token at a given address\n * @param connection A solana connection object\n * @param gatewayTokenAddress The address of the gateway token\n */\n\nconst getGatewayToken = (connection, gatewayTokenAddress) => __awaiter(void 0, void 0, void 0, function* () {\n  const account = yield connection.getAccountInfo(gatewayTokenAddress, constants_1.SOLANA_COMMITMENT);\n  if (!account) return null;\n  return (0, exports.dataToGatewayToken)(GatewayTokenData_1.GatewayTokenData.fromAccount(account.data), gatewayTokenAddress);\n});\n\nexports.getGatewayToken = getGatewayToken;\n/**\n * Returns whether or not a gatekeeper exists from a network and authority\n * @param connection A solana connection\n * @param gatekeeperAuthority The authority of the gatekeeper\n * @param gatekeeperNetwork The network of the gatekeeper\n */\n\nconst gatekeeperExists = (connection, gatekeeperAuthority, gatekeeperNetwork) => __awaiter(void 0, void 0, void 0, function* () {\n  const gatekeeperAccount = yield (0, exports.getGatekeeperAccountKey)(gatekeeperAuthority, gatekeeperNetwork);\n  const account = yield connection.getAccountInfo(gatekeeperAccount, constants_1.SOLANA_COMMITMENT);\n  return account != null && account.owner == constants_1.PROGRAM_ID;\n});\n\nexports.gatekeeperExists = gatekeeperExists;","map":{"version":3,"sources":["../../src/lib/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.gatekeeperExists = exports.getGatewayToken = exports.removeAccountChangeListener = exports.onGatewayTokenChange = exports.findGatewayToken = exports.findGatewayTokens = exports.dataToGatewayToken = exports.getGatewayTokenKeyForOwner = exports.getGatekeeperAccountKey = exports.proxyConnectionWithRetry = exports.runFunctionWithRetry = exports.defaultRetryConfig = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_1 = require(\"./constants\");\nconst types_1 = require(\"../types\");\nconst GatewayTokenData_1 = require(\"./GatewayTokenData\");\nconst async_retry_1 = __importDefault(require(\"async-retry\"));\nconst R = __importStar(require(\"ramda\"));\nexports.defaultRetryConfig = {\n    retryCount: constants_1.DEFAULT_SOLANA_RETRIES,\n    exponentialFactor: 2,\n    timeouts: {\n        processed: constants_1.SOLANA_TIMEOUT_PROCESSED,\n        confirmed: constants_1.SOLANA_TIMEOUT_CONFIRMED,\n        finalized: constants_1.SOLANA_TIMEOUT_FINALIZED,\n    },\n};\nconst runFunctionWithRetry = (methodName, // for logging purposes so we know which call this was\nfn, commitment, customRetryConfig) => __awaiter(void 0, void 0, void 0, function* () {\n    const retryConfig = Object.assign(Object.assign({}, exports.defaultRetryConfig), customRetryConfig);\n    let timeout = R.path([\"timeouts\", commitment], retryConfig) ||\n        retryConfig.timeouts.confirmed;\n    //Â If we have any bugs before this point, this is the final safeguard against undefined retry config values.\n    // TODO IDCOM-1558 Improve the type safety of config to avoid the need for checks such as this.\n    let retryCount = retryConfig.retryCount;\n    let expFactor = retryConfig.exponentialFactor;\n    if (!retryCount) {\n        console.error(`retryCount not set in Solana connection proxy. Defaulting to ${constants_1.DEFAULT_SOLANA_RETRIES}`);\n        retryCount = constants_1.DEFAULT_SOLANA_RETRIES;\n    }\n    if (!expFactor) {\n        console.error(\"exponentialFactor not set in Solana connection proxy. Defaulting to 2\");\n        retryCount = 2;\n    }\n    if (!timeout) {\n        console.error(`timeout not set in Solana connection proxy. Defaulting to ${constants_1.SOLANA_TIMEOUT_CONFIRMED}`);\n        timeout = constants_1.SOLANA_TIMEOUT_CONFIRMED;\n    }\n    let currentAttempt = 0;\n    try {\n        return yield (0, async_retry_1.default)(() => __awaiter(void 0, void 0, void 0, function* () {\n            currentAttempt++;\n            console.log(`Trying Solana connection method '${methodName}' (attempt ${currentAttempt} of ${retryConfig.retryCount + 1})`, { timeout });\n            const timeoutPromise = new Promise((_resolve, reject) => setTimeout(() => reject(new Error(\"timeout\")), timeout));\n            const blockchainPromise = fn();\n            return Promise.race([blockchainPromise, timeoutPromise]);\n        }), {\n            retries: retryCount,\n            factor: expFactor,\n        });\n    }\n    catch (err) {\n        console.error(`Retries exhausted in Solana connection method '${methodName}' .`, { error: err });\n        throw err;\n    }\n});\nexports.runFunctionWithRetry = runFunctionWithRetry;\nconst proxyConnectionWithRetry = (originalConnection, customRetryConfig = exports.defaultRetryConfig) => {\n    const proxyHandler = {\n        get(target, propKey, receiver) {\n            switch (propKey) {\n                case \"sendTransaction\":\n                    return (transaction, signers, options) => {\n                        const fn = () => __awaiter(this, void 0, void 0, function* () { return target.sendTransaction(transaction, signers, options); });\n                        return (0, exports.runFunctionWithRetry)(\"sendTransaction\", fn, constants_1.SOLANA_COMMITMENT, customRetryConfig);\n                    };\n                case \"confirmTransaction\":\n                    return (signature, commitment) => {\n                        const fn = () => __awaiter(this, void 0, void 0, function* () { return target.confirmTransaction(signature, commitment); });\n                        return (0, exports.runFunctionWithRetry)(\"confirmTransaction\", fn, constants_1.SOLANA_COMMITMENT, customRetryConfig);\n                    };\n                case \"getProgramAccounts\":\n                    return (programId, configOrCommitment) => {\n                        const fn = () => __awaiter(this, void 0, void 0, function* () { return target.getProgramAccounts(programId, configOrCommitment); });\n                        return (0, exports.runFunctionWithRetry)(\"getProgramAccounts\", fn, constants_1.SOLANA_COMMITMENT, customRetryConfig);\n                    };\n                case \"getAccountInfo\":\n                    return (publicKey, commitment) => {\n                        const fn = () => __awaiter(this, void 0, void 0, function* () { return target.getAccountInfo(publicKey, commitment); });\n                        return (0, exports.runFunctionWithRetry)(\"getAccountInfo\", fn, constants_1.SOLANA_COMMITMENT, customRetryConfig);\n                    };\n                default:\n                    // Return the original property unchanged:\n                    return Reflect.get(target, propKey, receiver);\n            }\n        },\n        apply(target, thisArg, argumentsList) {\n            const fn = () => __awaiter(this, void 0, void 0, function* () { return target.apply(thisArg, argumentsList); });\n            return (0, exports.runFunctionWithRetry)(\"apply\", fn, constants_1.SOLANA_COMMITMENT, customRetryConfig);\n        },\n    };\n    return new Proxy(originalConnection, proxyHandler);\n};\nexports.proxyConnectionWithRetry = proxyConnectionWithRetry;\n/**\n * Derive the address of the gatekeeper PDA for this gatekeeper\n * @param authority The gatekeeper\n * @param network The network\n */\nconst getGatekeeperAccountKey = (authority, network) => __awaiter(void 0, void 0, void 0, function* () {\n    const publicKeyNonce = yield web3_js_1.PublicKey.findProgramAddress([\n        authority.toBuffer(),\n        network.toBuffer(),\n        Buffer.from(constants_1.GATEKEEPER_NONCE_SEED_STRING, \"utf8\"),\n    ], constants_1.PROGRAM_ID);\n    return publicKeyNonce[0];\n});\nexports.getGatekeeperAccountKey = getGatekeeperAccountKey;\n/**\n * Derive the address of the gateway token PDA for this owner address and optional seed.\n * @param owner The owner of the gateway token\n * @param gatekeeperNetwork The network of the gateway token\n * @param seed An 8-byte seed array, used to add multiple tokens to the same owner. Must be unique to each token, if present\n */\nconst getGatewayTokenKeyForOwner = (owner, gatekeeperNetwork, seed) => __awaiter(void 0, void 0, void 0, function* () {\n    const additionalSeed = seed\n        ? Buffer.from(seed)\n        : Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]);\n    if (additionalSeed.length != 8) {\n        throw new Error(\"Additional Seed has length \" +\n            additionalSeed.length +\n            \" instead of 8 when calling getGatewayTokenKeyForOwner.\");\n    }\n    const seeds = [\n        owner.toBuffer(),\n        Buffer.from(constants_1.GATEWAY_TOKEN_ADDRESS_SEED, \"utf8\"),\n        additionalSeed,\n        gatekeeperNetwork.toBuffer(),\n    ];\n    const publicKeyNonce = yield web3_js_1.PublicKey.findProgramAddress(seeds, constants_1.PROGRAM_ID);\n    return publicKeyNonce[0];\n});\nexports.getGatewayTokenKeyForOwner = getGatewayTokenKeyForOwner;\n// Based on solana/integration-lib/src/state.rs\n// If the optional the parent-gateway-token field is populated, this value will be\n// 34 (2 + 32) instead. TODO IDCOM-320 restructure the gateway token accounts to put\n// all optional values at the end of the struct to simplify account parsing a little\nconst GATEWAY_TOKEN_ACCOUNT_OWNER_FIELD_OFFSET = 2;\n// As above, if optional fields are present, this will differ. TODO IDCOM-320 fixes this\nconst GATEWAY_TOKEN_ACCOUNT_GATEKEEPER_NETWORK_FIELD_OFFSET = 35;\nfunction fromGatewayTokenState(state) {\n    if (!!state.active)\n        return types_1.State.ACTIVE;\n    if (!!state.revoked)\n        return types_1.State.REVOKED;\n    if (!!state.frozen)\n        return types_1.State.FROZEN;\n    throw new Error(\"Unrecognised state \" + JSON.stringify(state));\n}\nconst dataToGatewayToken = (data, publicKey) => {\n    var _a;\n    return new types_1.GatewayToken(data.issuingGatekeeper.toPublicKey(), data.gatekeeperNetwork.toPublicKey(), data.owner.toPublicKey(), fromGatewayTokenState(data.state), publicKey, constants_1.PROGRAM_ID, (_a = data.expiry) === null || _a === void 0 ? void 0 : _a.toNumber());\n};\nexports.dataToGatewayToken = dataToGatewayToken;\n/**\n * Find all gateway tokens for a user on a gatekeeper network, optionally filtering out revoked tokens\n * @param connection A solana connection object\n * @param owner The token owner\n * @param gatekeeperNetwork The network to find a token for\n * @param {boolean=false} includeRevoked If false (default), filter out revoked tokens\n * @returns {Promise<GatewayToken[]>} All tokens for the owner\n */\nconst findGatewayTokens = (connection, owner, gatekeeperNetwork, includeRevoked = false) => __awaiter(void 0, void 0, void 0, function* () {\n    const ownerFilter = {\n        memcmp: {\n            offset: GATEWAY_TOKEN_ACCOUNT_OWNER_FIELD_OFFSET,\n            bytes: owner.toBase58(),\n        },\n    };\n    const gatekeeperNetworkFilter = {\n        memcmp: {\n            offset: GATEWAY_TOKEN_ACCOUNT_GATEKEEPER_NETWORK_FIELD_OFFSET,\n            bytes: gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58(),\n        },\n    };\n    const filters = [ownerFilter, gatekeeperNetworkFilter];\n    const accountsResponse = yield connection.getProgramAccounts(constants_1.PROGRAM_ID, {\n        filters,\n    });\n    if (!accountsResponse)\n        return [];\n    const toGatewayToken = ({ pubkey, account, }) => (0, exports.dataToGatewayToken)(GatewayTokenData_1.GatewayTokenData.fromAccount(account.data), pubkey);\n    return accountsResponse\n        .map(toGatewayToken)\n        .filter((gatewayToken) => gatewayToken.state !== types_1.State.REVOKED || includeRevoked);\n});\nexports.findGatewayTokens = findGatewayTokens;\n/**\n * Find any unrevoked token for a user on a gatekeeper network\n * @param connection A solana connection object\n * @param owner The token owner\n * @param gatekeeperNetwork The network to find a token for\n * @returns Promise<GatewayToken | null> An unrevoked token, if one exists for the owner\n */\nconst findGatewayToken = (connection, owner, gatekeeperNetwork) => __awaiter(void 0, void 0, void 0, function* () {\n    const tokens = yield (0, exports.findGatewayTokens)(connection, owner, gatekeeperNetwork, false);\n    if (tokens.length === 0)\n        return null;\n    // if any are valid, return the first one\n    const validTokens = tokens.filter((token) => token.isValid());\n    if (validTokens.length > 0)\n        return validTokens[0];\n    // if none is valid, return the first non-revoked one\n    const nonRevokedTokens = tokens.filter((token) => token.state !== types_1.State.REVOKED);\n    return nonRevokedTokens.length === 0 ? null : nonRevokedTokens[0];\n});\nexports.findGatewayToken = findGatewayToken;\n/**\n * Register a callback to be called whenever a gateway token changes state\n * @param connection A solana connection object\n * @param gatewayTokenAddress The address of the gateway token\n * @param callback The callback to register\n * @param commitment The solana commitment level at which to register gateway token changes. Defaults to 'confirmed'\n * @return The subscription id\n */\nconst onGatewayTokenChange = (connection, gatewayTokenAddress, callback, commitment = constants_1.SOLANA_COMMITMENT) => {\n    const accountCallback = (accountInfo) => {\n        const gatewayToken = (0, exports.dataToGatewayToken)(GatewayTokenData_1.GatewayTokenData.fromAccount(accountInfo.data), gatewayTokenAddress);\n        callback(gatewayToken);\n    };\n    return connection.onAccountChange(gatewayTokenAddress, accountCallback, commitment);\n};\nexports.onGatewayTokenChange = onGatewayTokenChange;\n/**\n * Stops listening to gateway state changes\n * @param connection A solana connection object\n * @param id The subscription id to deregister\n */\nconst removeAccountChangeListener = (connection, id) => connection.removeAccountChangeListener(id);\nexports.removeAccountChangeListener = removeAccountChangeListener;\n/**\n * Lookup the gateway token at a given address\n * @param connection A solana connection object\n * @param gatewayTokenAddress The address of the gateway token\n */\nconst getGatewayToken = (connection, gatewayTokenAddress) => __awaiter(void 0, void 0, void 0, function* () {\n    const account = yield connection.getAccountInfo(gatewayTokenAddress, constants_1.SOLANA_COMMITMENT);\n    if (!account)\n        return null;\n    return (0, exports.dataToGatewayToken)(GatewayTokenData_1.GatewayTokenData.fromAccount(account.data), gatewayTokenAddress);\n});\nexports.getGatewayToken = getGatewayToken;\n/**\n * Returns whether or not a gatekeeper exists from a network and authority\n * @param connection A solana connection\n * @param gatekeeperAuthority The authority of the gatekeeper\n * @param gatekeeperNetwork The network of the gatekeeper\n */\nconst gatekeeperExists = (connection, gatekeeperAuthority, gatekeeperNetwork) => __awaiter(void 0, void 0, void 0, function* () {\n    const gatekeeperAccount = yield (0, exports.getGatekeeperAccountKey)(gatekeeperAuthority, gatekeeperNetwork);\n    const account = yield connection.getAccountInfo(gatekeeperAccount, constants_1.SOLANA_COMMITMENT);\n    return account != null && account.owner == constants_1.PROGRAM_ID;\n});\nexports.gatekeeperExists = gatekeeperExists;\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"script"}