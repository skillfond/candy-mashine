{"ast":null,"code":"import React, { useContext, useEffect, useMemo } from 'react';\nimport { Keypair, Connection } from '@solana/web3.js';\nimport * as R from 'ramda';\nimport logger from '../logger';\nconst ConnectionContext = React.createContext(null);\nexport const getSolanaConnection = R.memoizeWith(R.identity, clusterUrl => {\n  logger.debug('new solana connection created using clusterUrl', clusterUrl);\n  return new Connection(clusterUrl, 'processed');\n});\nexport function SolanaConnectionProvider(_ref) {\n  let {\n    children = null,\n    endpoint\n  } = _ref;\n  const connection = useMemo(() => getSolanaConnection(endpoint), [endpoint]); // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from ever getting empty\n\n  useEffect(() => {\n    const id = connection.onAccountChange(Keypair.generate().publicKey, () => {});\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n  return React.createElement(ConnectionContext.Provider, {\n    value: {\n      endpoint,\n      connection\n    }\n  }, children);\n}\nexport function useConnection() {\n  const context = useContext(ConnectionContext);\n\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n\n  return context.connection;\n}","map":{"version":3,"sources":["F:/SitePortfolio/skillfond/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/solana/connection.js"],"names":["React","useContext","useEffect","useMemo","Keypair","Connection","R","logger","ConnectionContext","createContext","getSolanaConnection","memoizeWith","identity","clusterUrl","debug","SolanaConnectionProvider","children","endpoint","connection","id","onAccountChange","generate","publicKey","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","createElement","Provider","value","useConnection","context","Error"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,iBAApC;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,MAAMC,iBAAiB,GAAGR,KAAK,CAACS,aAAN,CAAoB,IAApB,CAA1B;AACA,OAAO,MAAMC,mBAAmB,GAAGJ,CAAC,CAACK,WAAF,CAAcL,CAAC,CAACM,QAAhB,EAA2BC,UAAD,IAAgB;AACzEN,EAAAA,MAAM,CAACO,KAAP,CAAa,gDAAb,EAA+DD,UAA/D;AACA,SAAO,IAAIR,UAAJ,CAAeQ,UAAf,EAA2B,WAA3B,CAAP;AACH,CAHkC,CAA5B;AAIP,OAAO,SAASE,wBAAT,OAAkE;AAAA,MAAhC;AAAEC,IAAAA,QAAQ,GAAG,IAAb;AAAmBC,IAAAA;AAAnB,GAAgC;AACrE,QAAMC,UAAU,GAAGf,OAAO,CAAC,MAAMO,mBAAmB,CAACO,QAAD,CAA1B,EAAsC,CAACA,QAAD,CAAtC,CAA1B,CADqE,CAErE;AACA;AACA;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMiB,EAAE,GAAGD,UAAU,CAACE,eAAX,CAA2BhB,OAAO,CAACiB,QAAR,GAAmBC,SAA9C,EAAyD,MAAM,CAAG,CAAlE,CAAX;AACA,WAAO,MAAM;AACTJ,MAAAA,UAAU,CAACK,2BAAX,CAAuCJ,EAAvC;AACH,KAFD;AAGH,GALQ,EAKN,CAACD,UAAD,CALM,CAAT;AAMAhB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMiB,EAAE,GAAGD,UAAU,CAACM,YAAX,CAAwB,MAAM,IAA9B,CAAX;AACA,WAAO,MAAM;AACTN,MAAAA,UAAU,CAACO,wBAAX,CAAoCN,EAApC;AACH,KAFD;AAGH,GALQ,EAKN,CAACD,UAAD,CALM,CAAT;AAMA,SAAQlB,KAAK,CAAC0B,aAAN,CAAoBlB,iBAAiB,CAACmB,QAAtC,EAAgD;AAAEC,IAAAA,KAAK,EAAE;AACzDX,MAAAA,QADyD;AAEzDC,MAAAA;AAFyD;AAAT,GAAhD,EAGCF,QAHD,CAAR;AAIH;AACD,OAAO,SAASa,aAAT,GAAyB;AAC5B,QAAMC,OAAO,GAAG7B,UAAU,CAACO,iBAAD,CAA1B;;AACA,MAAI,CAACsB,OAAL,EAAc;AACV,UAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACH;;AACD,SAAOD,OAAO,CAACZ,UAAf;AACH","sourcesContent":["import React, { useContext, useEffect, useMemo } from 'react';\nimport { Keypair, Connection } from '@solana/web3.js';\nimport * as R from 'ramda';\nimport logger from '../logger';\nconst ConnectionContext = React.createContext(null);\nexport const getSolanaConnection = R.memoizeWith(R.identity, (clusterUrl) => {\n    logger.debug('new solana connection created using clusterUrl', clusterUrl);\n    return new Connection(clusterUrl, 'processed');\n});\nexport function SolanaConnectionProvider({ children = null, endpoint, }) {\n    const connection = useMemo(() => getSolanaConnection(endpoint), [endpoint]);\n    // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n    // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n    // This is a hack to prevent the list from ever getting empty\n    useEffect(() => {\n        const id = connection.onAccountChange(Keypair.generate().publicKey, () => { });\n        return () => {\n            connection.removeAccountChangeListener(id);\n        };\n    }, [connection]);\n    useEffect(() => {\n        const id = connection.onSlotChange(() => null);\n        return () => {\n            connection.removeSlotChangeListener(id);\n        };\n    }, [connection]);\n    return (React.createElement(ConnectionContext.Provider, { value: {\n            endpoint,\n            connection,\n        } }, children));\n}\nexport function useConnection() {\n    const context = useContext(ConnectionContext);\n    if (!context) {\n        throw new Error('Missing connection context');\n    }\n    return context.connection;\n}\n"]},"metadata":{},"sourceType":"module"}