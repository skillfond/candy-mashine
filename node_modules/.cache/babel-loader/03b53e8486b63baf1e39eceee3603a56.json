{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Test Mint\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _regeneratorRuntime from \"C:\\\\Test Mint\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { useCallback } from 'react';\nimport logger from '../logger';\nimport useWalletHooks from './useWalletHooks';\n\nvar usePowo = function usePowo(_ref, state, dispatch) {\n  var wallet = _ref.wallet,\n      chainImplementation = _ref.chainImplementation;\n  var powoFinished = state.powoFinished,\n      walletPowoInProgress = state.walletPowoInProgress,\n      refreshInProgress = state.refreshInProgress;\n\n  var _useWalletHooks = useWalletHooks(wallet, state, dispatch),\n      expectWalletConnected = _useWalletHooks.expectWalletConnected;\n  /**\n   * wait until the user has confirmed they want to continue the proof of wallet ownership flow\n   * then resolve the promise\n   */\n\n\n  var waitForConfirmPOWO = useCallback(\n  /*#__PURE__*/\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(payload) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              logger.debug('usePowo waitForConfirmPOWO before expectWalletConnected', {\n                payload: payload\n              });\n              expectWalletConnected();\n              return _context.abrupt(\"return\", new Promise(function (resolve) {\n                logger.debug('usePowo waitForConfirmPOWO', {\n                  powoFinished: powoFinished\n                });\n\n                if (powoFinished) {\n                  resolve(payload);\n                }\n              }));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [powoFinished, expectWalletConnected]);\n  /**\n   * wait until the user has provided proof of wallet ownership using their connected wallet\n   * if this was triggered from the refresh flow, dispatch events to indicate progress\n   * if not, resolve a promise when the proof is ready\n   */\n\n  var waitForPOWO = useCallback( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2( // eslint-disable-next-line @typescript-eslint/no-shadow\n    payload) {\n      var connectedWallet;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              logger.debug('usePowo waitForPOWO before expectWalletConnected');\n              connectedWallet = expectWalletConnected();\n\n              if (!connectedWallet) {\n                _context2.next = 5;\n                break;\n              }\n\n              logger.debug('usePowo waitForPOWO', {\n                payload: payload,\n                publicKey: connectedWallet.publicKey\n              });\n              return _context2.abrupt(\"return\", new Promise(function (resolve) {\n                logger.debug('usePowo waitForPOWO walletPowoInProgress', {\n                  walletPowoInProgress: walletPowoInProgress,\n                  refreshInProgress: refreshInProgress\n                });\n                chainImplementation.proveWalletOwnership().then(function (proof) {\n                  resolve({\n                    proof: proof,\n                    payload: payload\n                  });\n                  dispatch({\n                    type: 'walletPowoComplete'\n                  });\n                  dispatch({\n                    type: 'civicPass_check_token_status'\n                  });\n                }).catch(function (error) {\n                  logger.error('Proof of wallet ownership error: ', error);\n                  dispatch({\n                    type: 'walletPowoIncomplete'\n                  });\n                });\n              }));\n\n            case 5:\n              return _context2.abrupt(\"return\", {});\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [expectWalletConnected, walletPowoInProgress, chainImplementation]);\n  return {\n    waitForConfirmPOWO: waitForConfirmPOWO,\n    waitForPOWO: waitForPOWO\n  };\n};\n\nexport default usePowo;","map":{"version":3,"sources":["C:/Test Mint/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/usePOWO.js"],"names":["useCallback","logger","useWalletHooks","usePowo","state","dispatch","wallet","chainImplementation","powoFinished","walletPowoInProgress","refreshInProgress","expectWalletConnected","waitForConfirmPOWO","payload","debug","Promise","resolve","waitForPOWO","connectedWallet","publicKey","proveWalletOwnership","then","proof","type","catch","error"],"mappings":"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","sourcesContent":["import { useCallback } from 'react';\nimport logger from '../logger';\nimport useWalletHooks from './useWalletHooks';\nconst usePowo = ({ wallet, chainImplementation }, state, dispatch) => {\n    const { powoFinished, walletPowoInProgress, refreshInProgress } = state;\n    const { expectWalletConnected } = useWalletHooks(wallet, state, dispatch);\n    /**\n     * wait until the user has confirmed they want to continue the proof of wallet ownership flow\n     * then resolve the promise\n     */\n    const waitForConfirmPOWO = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    async (payload) => {\n        logger.debug('usePowo waitForConfirmPOWO before expectWalletConnected', {\n            payload,\n        });\n        expectWalletConnected();\n        return new Promise((resolve) => {\n            logger.debug('usePowo waitForConfirmPOWO', { powoFinished });\n            if (powoFinished) {\n                resolve(payload);\n            }\n        });\n    }, [powoFinished, expectWalletConnected]);\n    /**\n     * wait until the user has provided proof of wallet ownership using their connected wallet\n     * if this was triggered from the refresh flow, dispatch events to indicate progress\n     * if not, resolve a promise when the proof is ready\n     */\n    const waitForPOWO = useCallback(async (\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    payload) => {\n        logger.debug('usePowo waitForPOWO before expectWalletConnected');\n        const connectedWallet = expectWalletConnected();\n        if (connectedWallet) {\n            logger.debug('usePowo waitForPOWO', {\n                payload,\n                publicKey: connectedWallet.publicKey,\n            });\n            return new Promise((resolve) => {\n                logger.debug('usePowo waitForPOWO walletPowoInProgress', {\n                    walletPowoInProgress,\n                    refreshInProgress,\n                });\n                chainImplementation\n                    .proveWalletOwnership()\n                    .then((proof) => {\n                    resolve({ proof, payload });\n                    dispatch({ type: 'walletPowoComplete' });\n                    dispatch({ type: 'civicPass_check_token_status' });\n                })\n                    .catch((error) => {\n                    logger.error('Proof of wallet ownership error: ', error);\n                    dispatch({ type: 'walletPowoIncomplete' });\n                });\n            });\n        }\n        return {};\n    }, [expectWalletConnected, walletPowoInProgress, chainImplementation]);\n    return {\n        waitForConfirmPOWO,\n        waitForPOWO,\n    };\n};\nexport default usePowo;\n"]},"metadata":{},"sourceType":"module"}