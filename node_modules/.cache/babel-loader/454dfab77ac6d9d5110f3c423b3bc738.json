{"ast":null,"code":"import _defineProperty from \"C:\\\\Test Mint\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _asyncToGenerator from \"C:\\\\Test Mint\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _regeneratorRuntime from \"C:\\\\Test Mint\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { useEffect } from 'react';\nimport { CivicSignEventTypeRequest, remoteSignWindowEventEmitterImplementation } from '../utils/remoteSign';\nimport logger from '../logger';\n\nvar logDebug = function logDebug(message) {\n  var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return logger.debug(\"[useCivicPassEventListener] \".concat(message), obj);\n};\n\nvar logError = function logError(message) {\n  var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return logger.error(\"[useCivicPassEventListener] \".concat(message), obj);\n};\n\nvar useCivicPassEventListener = function useCivicPassEventListener(_ref) {\n  var wallet = _ref.wallet,\n      chainImplementation = _ref.chainImplementation,\n      remoteSign = _ref.remoteSign;\n\n  var dispatchEvent = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response) {\n      var _events;\n\n      var remoteSigner, events, event;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (wallet) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              remoteSigner = remoteSign !== null && remoteSign !== void 0 ? remoteSign : remoteSignWindowEventEmitterImplementation();\n              events = (_events = {}, _defineProperty(_events, CivicSignEventTypeRequest.REQUEST_PUBLIC_KEY, function () {\n                return new Promise(function (resolve) {\n                  remoteSigner === null || remoteSigner === void 0 ? void 0 : remoteSigner.sendPublicKey(wallet.publicKey);\n                  resolve();\n                });\n              }), _defineProperty(_events, CivicSignEventTypeRequest.REQUEST_DID, function () {\n                return new Promise(function (resolve) {\n                  remoteSigner === null || remoteSigner === void 0 ? void 0 : remoteSigner.sendDid(\"did:sol:\".concat(wallet.publicKey));\n                  resolve();\n                });\n              }), _defineProperty(_events, CivicSignEventTypeRequest.REQUEST_SIGNED_PROOF, _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                var proof;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.prev = 0;\n                        _context.next = 3;\n                        return chainImplementation.proveWalletOwnership();\n\n                      case 3:\n                        proof = _context.sent;\n                        remoteSigner === null || remoteSigner === void 0 ? void 0 : remoteSigner.sendSignedProof(proof);\n                        _context.next = 10;\n                        break;\n\n                      case 7:\n                        _context.prev = 7;\n                        _context.t0 = _context[\"catch\"](0);\n                        logError('Error signing proof', _context.t0);\n\n                      case 10:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[0, 7]]);\n              }))), _events);\n              event = events[response];\n\n              if (!event) {\n                _context2.next = 9;\n                break;\n              }\n\n              _context2.next = 8;\n              return event();\n\n            case 8:\n              logDebug('Successfully emitted compliance event', response);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function dispatchEvent(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Listen for post messages from the compliance iframe and dispatch events\n   * based on the event type\n   */\n\n\n  useEffect(function () {\n    var handler = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return dispatchEvent(response.data);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function handler(_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    window.addEventListener('message', handler);\n    return function () {\n      logDebug('Removing event listener for compliance');\n      return window.removeEventListener('message', handler);\n    };\n  }, []);\n  return {\n    dispatchEvent: dispatchEvent\n  };\n};\n\nexport default useCivicPassEventListener;","map":{"version":3,"sources":["C:/Test Mint/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/useCivicPassEventListener.js"],"names":["useEffect","CivicSignEventTypeRequest","remoteSignWindowEventEmitterImplementation","logger","logDebug","message","obj","debug","logError","error","useCivicPassEventListener","wallet","chainImplementation","remoteSign","dispatchEvent","response","remoteSigner","events","REQUEST_PUBLIC_KEY","Promise","resolve","sendPublicKey","publicKey","REQUEST_DID","sendDid","REQUEST_SIGNED_PROOF","proveWalletOwnership","proof","sendSignedProof","event","handler","data","window","addEventListener","removeEventListener"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,yBAAT,EAAoCC,0CAApC,QAAsF,qBAAtF;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,OAAD;AAAA,MAAUC,GAAV,uEAAgB,IAAhB;AAAA,SAAyBH,MAAM,CAACI,KAAP,uCAA4CF,OAA5C,GAAuDC,GAAvD,CAAzB;AAAA,CAAjB;;AACA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACH,OAAD;AAAA,MAAUC,GAAV,uEAAgB,IAAhB;AAAA,SAAyBH,MAAM,CAACM,KAAP,uCAA4CJ,OAA5C,GAAuDC,GAAvD,CAAzB;AAAA,CAAjB;;AACA,IAAMI,yBAAyB,GAAG,SAA5BA,yBAA4B,OAAkD;AAAA,MAA/CC,MAA+C,QAA/CA,MAA+C;AAAA,MAAvCC,mBAAuC,QAAvCA,mBAAuC;AAAA,MAAlBC,UAAkB,QAAlBA,UAAkB;;AAChF,MAAMC,aAAa;AAAA,yEAAG,kBAAOC,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACbJ,MADa;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGZK,cAAAA,YAHY,GAGGH,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+CA,UAA/C,GAA4DX,0CAA0C,EAHzG;AAIZe,cAAAA,MAJY,2CAKbhB,yBAAyB,CAACiB,kBALb,EAKkC;AAAA,uBAAM,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC3EJ,kBAAAA,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACK,aAAb,CAA2BV,MAAM,CAACW,SAAlC,CAA5D;AACAF,kBAAAA,OAAO;AACV,iBAHqD,CAAN;AAAA,eALlC,4BASbnB,yBAAyB,CAACsB,WATb,EAS2B;AAAA,uBAAM,IAAIJ,OAAJ,CAAY,UAACC,OAAD,EAAa;AACpEJ,kBAAAA,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACQ,OAAb,mBAAgCb,MAAM,CAACW,SAAvC,EAA5D;AACAF,kBAAAA,OAAO;AACV,iBAH8C,CAAN;AAAA,eAT3B,4BAabnB,yBAAyB,CAACwB,oBAbb,2DAaoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEtBb,mBAAmB,CAACc,oBAApB,EAFsB;;AAAA;AAEpCC,wBAAAA,KAFoC;AAG1CX,wBAAAA,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACY,eAAb,CAA6BD,KAA7B,CAA5D;AAH0C;AAAA;;AAAA;AAAA;AAAA;AAM1CnB,wBAAAA,QAAQ,CAAC,qBAAD,cAAR;;AAN0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAbpC;AAuBZqB,cAAAA,KAvBY,GAuBJZ,MAAM,CAACF,QAAD,CAvBF;;AAAA,mBAwBdc,KAxBc;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAyBRA,KAAK,EAzBG;;AAAA;AA0BdzB,cAAAA,QAAQ,CAAC,uCAAD,EAA0CW,QAA1C,CAAR;;AA1Bc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAbD,aAAa;AAAA;AAAA;AAAA,KAAnB;AA6BA;AACJ;AACA;AACA;;;AACId,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAM8B,OAAO;AAAA,2EAAG,kBAAOf,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACND,aAAa,CAACC,QAAQ,CAACgB,IAAV,CADP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAPD,OAAO;AAAA;AAAA;AAAA,OAAb;;AAGAE,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCH,OAAnC;AACA,WAAO,YAAM;AACT1B,MAAAA,QAAQ,CAAC,wCAAD,CAAR;AACA,aAAO4B,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCJ,OAAtC,CAAP;AACH,KAHD;AAIH,GATQ,EASN,EATM,CAAT;AAUA,SAAO;AAAEhB,IAAAA,aAAa,EAAbA;AAAF,GAAP;AACH,CA7CD;;AA8CA,eAAeJ,yBAAf","sourcesContent":["import { useEffect } from 'react';\nimport { CivicSignEventTypeRequest, remoteSignWindowEventEmitterImplementation } from '../utils/remoteSign';\nimport logger from '../logger';\nconst logDebug = (message, obj = null) => logger.debug(`[useCivicPassEventListener] ${message}`, obj);\nconst logError = (message, obj = null) => logger.error(`[useCivicPassEventListener] ${message}`, obj);\nconst useCivicPassEventListener = ({ wallet, chainImplementation, remoteSign, }) => {\n    const dispatchEvent = async (response) => {\n        if (!wallet)\n            return;\n        const remoteSigner = remoteSign !== null && remoteSign !== void 0 ? remoteSign : remoteSignWindowEventEmitterImplementation();\n        const events = {\n            [CivicSignEventTypeRequest.REQUEST_PUBLIC_KEY]: () => new Promise((resolve) => {\n                remoteSigner === null || remoteSigner === void 0 ? void 0 : remoteSigner.sendPublicKey(wallet.publicKey);\n                resolve();\n            }),\n            [CivicSignEventTypeRequest.REQUEST_DID]: () => new Promise((resolve) => {\n                remoteSigner === null || remoteSigner === void 0 ? void 0 : remoteSigner.sendDid(`did:sol:${wallet.publicKey}`);\n                resolve();\n            }),\n            [CivicSignEventTypeRequest.REQUEST_SIGNED_PROOF]: async () => {\n                try {\n                    const proof = await chainImplementation.proveWalletOwnership();\n                    remoteSigner === null || remoteSigner === void 0 ? void 0 : remoteSigner.sendSignedProof(proof);\n                }\n                catch (err) {\n                    logError('Error signing proof', err);\n                }\n            },\n        };\n        const event = events[response];\n        if (event) {\n            await event();\n            logDebug('Successfully emitted compliance event', response);\n        }\n    };\n    /**\n     * Listen for post messages from the compliance iframe and dispatch events\n     * based on the event type\n     */\n    useEffect(() => {\n        const handler = async (response) => {\n            await dispatchEvent(response.data);\n        };\n        window.addEventListener('message', handler);\n        return () => {\n            logDebug('Removing event listener for compliance');\n            return window.removeEventListener('message', handler);\n        };\n    }, []);\n    return { dispatchEvent };\n};\nexport default useCivicPassEventListener;\n"]},"metadata":{},"sourceType":"module"}