{"ast":null,"code":"import _asyncToGenerator from \"F:\\\\SitePortfolio\\\\skillfond\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _regeneratorRuntime from \"F:\\\\SitePortfolio\\\\skillfond\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { useEffect } from 'react';\nimport { GatekeeperRecordState, GatewayStatus } from '../types';\nimport logger from '../logger';\nimport useWalletHooks from './useWalletHooks';\nexport var reducer = function reducer(state, action) {\n  switch (action.type) {\n    case 'tokenOnChainNotFound':\n      return Object.assign(Object.assign({}, state), {\n        gatewayStatus: GatewayStatus.NOT_REQUESTED\n      });\n\n    case 'tokenOnChainError':\n      return Object.assign(Object.assign({}, state), {\n        gatewayStatus: GatewayStatus.ERROR\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar useChain = function useChain(_ref, state, dispatch) {\n  var wallet = _ref.wallet,\n      chainImplementation = _ref.chainImplementation;\n\n  var _useWalletHooks = useWalletHooks(wallet, state, dispatch),\n      expectWalletConnected = _useWalletHooks.expectWalletConnected;\n\n  var gatekeeperRecordState = state.gatekeeperRecordState,\n      gatewayToken = state.gatewayToken;\n\n  var logDebug = function logDebug(message) {\n    var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return logger.debug(\"[useChain] \".concat(message), obj);\n  };\n\n  var logError = function logError(message) {\n    var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return logger.error(\"[useChain] \".concat(message), obj);\n  };\n\n  var removeOnChainListener = function removeOnChainListener(listernerId) {\n    try {\n      logDebug('Removing onChainListener with id: ', listernerId);\n      chainImplementation.removeOnGatewayTokenChangeListener(listernerId);\n    } catch (error) {\n      logError('Error removing on chain listener', error);\n    }\n  };\n  /**\n   * listen to the blockchain for any token changes and update local state if there are\n   */\n\n\n  var addTokenChangeListeners = // eslint-disable-next-line @typescript-eslint/no-shadow\n  function addTokenChangeListeners(gatewayToken) {\n    var tokenChangeCallback = function tokenChangeCallback(token) {\n      dispatch({\n        type: 'tokenChange',\n        token: token\n      });\n      dispatch({\n        type: 'civicPass_check_token_status',\n        token: token\n      });\n    };\n\n    var listernerId = chainImplementation.addOnGatewayTokenChangeListener(gatewayToken, tokenChangeCallback);\n    logDebug('Adding onChainListener with id: ', listernerId);\n    return listernerId;\n  };\n\n  useEffect(function () {\n    var listernerId;\n\n    if (gatewayToken) {\n      listernerId = addTokenChangeListeners(gatewayToken);\n    }\n\n    return function () {\n      if (listernerId) {\n        removeOnChainListener(listernerId);\n      }\n    };\n  }, [gatekeeperRecordState, gatewayToken]);\n  /**\n   * use the on-chain lookup utility findGatewayToken to retrieve a token from the chain\n   * when a token is found, set up listeners to monitor any on-chain changes\n   */\n\n  var dispatchTokenFromChain = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var connectedWallet, token, shouldDispatchTokenFromChain;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              connectedWallet = expectWalletConnected();\n              _context.prev = 1;\n              logDebug('Fetching token from chain');\n              _context.next = 5;\n              return chainImplementation.findGatewayToken();\n\n            case 5:\n              token = _context.sent;\n\n              if (token) {\n                _context.next = 9;\n                break;\n              }\n\n              dispatch({\n                type: 'tokenOnChainNotFound'\n              });\n              return _context.abrupt(\"return\");\n\n            case 9:\n              logDebug('Token found', token);\n              dispatch({\n                type: 'tokenChange',\n                token: token\n              }); // Determine if we should show the civicPass dialog when we have a gateway token\n\n              shouldDispatchTokenFromChain = gatekeeperRecordState && [GatekeeperRecordState.ISSUED_EXPIRED, GatekeeperRecordState.ISSUED_EXPIRY_APPROACHING, GatekeeperRecordState.ISSUED_LOCATION_NOT_SUPPORTED].includes(gatekeeperRecordState);\n\n              if (shouldDispatchTokenFromChain) {\n                _context.next = 14;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 14:\n              dispatch({\n                type: 'civicPass_check_token_status',\n                token: token\n              });\n              _context.next = 22;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](1);\n              logError(\"Error getting token from chain for \".concat(connectedWallet.publicKey), _context.t0);\n              dispatch({\n                type: 'tokenOnChainError'\n              });\n              throw _context.t0;\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 17]]);\n    }));\n\n    return function dispatchTokenFromChain() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Determine if we should fetch a token from chain based on the gatekeeper record state\n   */\n\n\n  useEffect(function () {\n    var shouldDispatchTokenFromChain = gatekeeperRecordState && [GatekeeperRecordState.ISSUED, GatekeeperRecordState.ISSUED_EXPIRED, GatekeeperRecordState.ISSUED_EXPIRY_APPROACHING, GatekeeperRecordState.REQUESTED, GatekeeperRecordState.ISSUED_LOCATION_NOT_SUPPORTED, GatekeeperRecordState.SERVER_FAILURE].includes(gatekeeperRecordState);\n    if (!shouldDispatchTokenFromChain) return;\n    dispatchTokenFromChain();\n  }, [gatekeeperRecordState]);\n  return {\n    addTokenChangeListeners: addTokenChangeListeners,\n    dispatchTokenFromChain: dispatchTokenFromChain\n  };\n};\n\nexport default useChain;","map":{"version":3,"sources":["F:/SitePortfolio/skillfond/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/useChain.js"],"names":["useEffect","GatekeeperRecordState","GatewayStatus","logger","useWalletHooks","reducer","state","action","type","Object","assign","gatewayStatus","NOT_REQUESTED","ERROR","useChain","dispatch","wallet","chainImplementation","expectWalletConnected","gatekeeperRecordState","gatewayToken","logDebug","message","obj","debug","logError","error","removeOnChainListener","listernerId","removeOnGatewayTokenChangeListener","addTokenChangeListeners","tokenChangeCallback","token","addOnGatewayTokenChangeListener","dispatchTokenFromChain","connectedWallet","findGatewayToken","shouldDispatchTokenFromChain","ISSUED_EXPIRED","ISSUED_EXPIRY_APPROACHING","ISSUED_LOCATION_NOT_SUPPORTED","includes","publicKey","ISSUED","REQUESTED","SERVER_FAILURE"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport { GatekeeperRecordState, GatewayStatus } from '../types';\nimport logger from '../logger';\nimport useWalletHooks from './useWalletHooks';\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        case 'tokenOnChainNotFound':\n            return Object.assign(Object.assign({}, state), { gatewayStatus: GatewayStatus.NOT_REQUESTED });\n        case 'tokenOnChainError':\n            return Object.assign(Object.assign({}, state), { gatewayStatus: GatewayStatus.ERROR });\n        default:\n            return state;\n    }\n};\nconst useChain = ({ wallet, chainImplementation, }, state, dispatch) => {\n    const { expectWalletConnected } = useWalletHooks(wallet, state, dispatch);\n    const { gatekeeperRecordState, gatewayToken } = state;\n    const logDebug = (message, obj = null) => logger.debug(`[useChain] ${message}`, obj);\n    const logError = (message, obj = null) => logger.error(`[useChain] ${message}`, obj);\n    const removeOnChainListener = (listernerId) => {\n        try {\n            logDebug('Removing onChainListener with id: ', listernerId);\n            chainImplementation.removeOnGatewayTokenChangeListener(listernerId);\n        }\n        catch (error) {\n            logError('Error removing on chain listener', error);\n        }\n    };\n    /**\n     * listen to the blockchain for any token changes and update local state if there are\n     */\n    const addTokenChangeListeners = \n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    (gatewayToken) => {\n        const tokenChangeCallback = (token) => {\n            dispatch({ type: 'tokenChange', token });\n            dispatch({ type: 'civicPass_check_token_status', token });\n        };\n        const listernerId = chainImplementation.addOnGatewayTokenChangeListener(gatewayToken, tokenChangeCallback);\n        logDebug('Adding onChainListener with id: ', listernerId);\n        return listernerId;\n    };\n    useEffect(() => {\n        let listernerId;\n        if (gatewayToken) {\n            listernerId = addTokenChangeListeners(gatewayToken);\n        }\n        return () => {\n            if (listernerId) {\n                removeOnChainListener(listernerId);\n            }\n        };\n    }, [gatekeeperRecordState, gatewayToken]);\n    /**\n     * use the on-chain lookup utility findGatewayToken to retrieve a token from the chain\n     * when a token is found, set up listeners to monitor any on-chain changes\n     */\n    const dispatchTokenFromChain = async () => {\n        const connectedWallet = expectWalletConnected();\n        try {\n            logDebug('Fetching token from chain');\n            const token = await chainImplementation.findGatewayToken();\n            if (!token) {\n                dispatch({ type: 'tokenOnChainNotFound' });\n                return;\n            }\n            logDebug('Token found', token);\n            dispatch({ type: 'tokenChange', token });\n            // Determine if we should show the civicPass dialog when we have a gateway token\n            const shouldDispatchTokenFromChain = gatekeeperRecordState &&\n                [\n                    GatekeeperRecordState.ISSUED_EXPIRED,\n                    GatekeeperRecordState.ISSUED_EXPIRY_APPROACHING,\n                    GatekeeperRecordState.ISSUED_LOCATION_NOT_SUPPORTED,\n                ].includes(gatekeeperRecordState);\n            if (!shouldDispatchTokenFromChain)\n                return;\n            dispatch({ type: 'civicPass_check_token_status', token });\n        }\n        catch (error) {\n            logError(`Error getting token from chain for ${connectedWallet.publicKey}`, error);\n            dispatch({ type: 'tokenOnChainError' });\n            throw error;\n        }\n    };\n    /**\n     * Determine if we should fetch a token from chain based on the gatekeeper record state\n     */\n    useEffect(() => {\n        const shouldDispatchTokenFromChain = gatekeeperRecordState &&\n            [\n                GatekeeperRecordState.ISSUED,\n                GatekeeperRecordState.ISSUED_EXPIRED,\n                GatekeeperRecordState.ISSUED_EXPIRY_APPROACHING,\n                GatekeeperRecordState.REQUESTED,\n                GatekeeperRecordState.ISSUED_LOCATION_NOT_SUPPORTED,\n                GatekeeperRecordState.SERVER_FAILURE,\n            ].includes(gatekeeperRecordState);\n        if (!shouldDispatchTokenFromChain)\n            return;\n        dispatchTokenFromChain();\n    }, [gatekeeperRecordState]);\n    return {\n        addTokenChangeListeners,\n        dispatchTokenFromChain,\n    };\n};\nexport default useChain;\n"]},"metadata":{},"sourceType":"module"}