{"ast":null,"code":"import _asyncToGenerator from \"F:\\\\SitePortfolio\\\\skillfond\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _defineProperty from \"F:\\\\SitePortfolio\\\\skillfond\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _regeneratorRuntime from \"F:\\\\SitePortfolio\\\\skillfond\\\\metaplex\\\\js\\\\packages\\\\candy-machine-ui\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { useEffect, useRef } from 'react';\nimport * as R from 'ramda';\nimport { GatekeeperRecordState, GatewayStatus } from '../types';\nimport logger from '../logger';\nimport useWalletHooks from './useWalletHooks';\nexport var reducer = function reducer(state, action) {\n  switch (action.type) {\n    case 'getGatekeeperRecord':\n      return Object.assign(Object.assign({}, state), {\n        gatewayStatus: GatewayStatus.CHECKING,\n        gatekeeperRecordState: undefined\n      });\n\n    case 'getGatekeeperRecord_failure':\n      return Object.assign(Object.assign({}, state), {\n        gatekeeperRecordState: action.gatekeeperRecord.state\n      });\n\n    case 'getGatekeeperRecord_success':\n      return Object.assign(Object.assign({}, state), {\n        gatekeeperRecordState: action.gatekeeperRecord.state,\n        civicPass: Object.assign(Object.assign({}, state.civicPass), {\n          requestPayload: action.gatekeeperRecord.payload\n        })\n      });\n\n    case 'getGatekeeperRecord_location_not_supported':\n      return Object.assign(Object.assign({}, state), {\n        gatewayStatus: GatewayStatus.LOCATION_NOT_SUPPORTED,\n        gatekeeperRecordState: action.gatekeeperRecord.state,\n        civicPass: Object.assign(Object.assign({}, state.civicPass), {\n          requestPayload: action.gatekeeperRecord.payload\n        })\n      });\n\n    case 'getGatekeeperRecord_issued_location_not_supported':\n      return Object.assign(Object.assign({}, state), {\n        gatewayStatus: GatewayStatus.LOCATION_NOT_SUPPORTED,\n        gatekeeperRecordState: action.gatekeeperRecord.state,\n        civicPass: Object.assign(Object.assign({}, state.civicPass), {\n          requestPayload: action.gatekeeperRecord.payload\n        })\n      });\n\n    case 'getGatekeeperRecord_not_found':\n      return Object.assign(Object.assign({}, state), {\n        gatewayStatus: GatewayStatus.NOT_REQUESTED,\n        gatekeeperRecordState: action.gatekeeperRecord.state\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar useGetGatekeeperRecord = function useGetGatekeeperRecord(_ref, state, dispatch) {\n  var wallet = _ref.wallet,\n      gatekeeperClient = _ref.gatekeeperClient,\n      httpConfig = _ref.httpConfig;\n\n  var _useWalletHooks = useWalletHooks(wallet, state, dispatch),\n      expectWalletConnected = _useWalletHooks.expectWalletConnected;\n\n  var logDebug = function logDebug(message) {\n    var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return logger.debug(\"[useGetGatekeeperRecord] \".concat(message), obj);\n  };\n\n  var gatewayToken = state.gatewayToken,\n      gatekeeperNetworkAddress = state.gatekeeperNetworkAddress;\n\n  var dispatchFetch = function dispatchFetch() {\n    return {\n      type: 'getGatekeeperRecord'\n    };\n  };\n\n  var dispatchFailure = function dispatchFailure() {\n    return {\n      type: 'getGatekeeperRecord_failure',\n      gatekeeperRecord: {\n        state: GatekeeperRecordState.SERVER_FAILURE,\n        payload: undefined\n      }\n    };\n  };\n\n  var dispatchSuccess = function dispatchSuccess(record) {\n    return {\n      type: 'getGatekeeperRecord_success',\n      gatekeeperRecord: record\n    };\n  };\n\n  var dispatchLocationNotSupported = function dispatchLocationNotSupported(record) {\n    return {\n      type: 'getGatekeeperRecord_location_not_supported',\n      gatekeeperRecord: record\n    };\n  };\n\n  var dispatchIssuedLocationNotSupported = function dispatchIssuedLocationNotSupported(record) {\n    return {\n      type: 'getGatekeeperRecord_issued_location_not_supported',\n      gatekeeperRecord: record\n    };\n  };\n\n  var dispatchRecordNotFound = function dispatchRecordNotFound(record) {\n    return {\n      type: 'getGatekeeperRecord_not_found',\n      gatekeeperRecord: record\n    };\n  };\n\n  var getAction = function getAction(gatekeeperRecordState) {\n    var _actions;\n\n    var actions = (_actions = {}, _defineProperty(_actions, GatekeeperRecordState.REQUESTED, function () {\n      return dispatchSuccess(gatekeeperRecordState);\n    }), _defineProperty(_actions, GatekeeperRecordState.ISSUED, function () {\n      return dispatchSuccess(gatekeeperRecordState);\n    }), _defineProperty(_actions, GatekeeperRecordState.ISSUED_EXPIRED, function () {\n      return dispatchSuccess(gatekeeperRecordState);\n    }), _defineProperty(_actions, GatekeeperRecordState.ISSUED_EXPIRY_APPROACHING, function () {\n      return dispatchSuccess(gatekeeperRecordState);\n    }), _defineProperty(_actions, GatekeeperRecordState.ISSUED_LOCATION_NOT_SUPPORTED, function () {\n      return dispatchIssuedLocationNotSupported(gatekeeperRecordState);\n    }), _defineProperty(_actions, GatekeeperRecordState.LOCATION_NOT_SUPPORTED, function () {\n      return dispatchLocationNotSupported(gatekeeperRecordState);\n    }), _defineProperty(_actions, GatekeeperRecordState.NOT_REQUESTED, function () {\n      return dispatchRecordNotFound(gatekeeperRecordState);\n    }), _actions);\n    return actions[gatekeeperRecordState.state];\n  };\n  /**\n   * Check to see if there is getGatekeeperRecord and dispatch actions based on the state of the record.\n   * If the service call fails dispatch a failure.\n   */\n\n\n  var dispatchGatekeeperRecord = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var walletAddress, record, action;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              walletAddress = expectWalletConnected();\n              logDebug('Fetching Gatekeeper record');\n              dispatch(dispatchFetch());\n              _context.prev = 3;\n              _context.next = 6;\n              return gatekeeperClient().getGatekeeperRecordWithPayload(walletAddress.publicKey);\n\n            case 6:\n              record = _context.sent;\n              logDebug('Gatekeeper record response state: ', GatekeeperRecordState[record.state]);\n              action = getAction(record);\n\n              if (action) {\n                _context.next = 12;\n                break;\n              }\n\n              logger.error('Cannot dispatch action for invalid Gatekeeper Record State.', {\n                record: record\n              });\n              return _context.abrupt(\"return\");\n\n            case 12:\n              dispatch(action());\n              _context.next = 20;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](3);\n              logger.error('Failed to fetch Gatekeeper record', _context.t0);\n              dispatch(dispatchFailure());\n              throw _context.t0;\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 15]]);\n    }));\n\n    return function dispatchGatekeeperRecord() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var useHttpConfigRef = function useHttpConfigRef(newHttpConfig) {\n    var ref = useRef(); // We have to perform a deep equality check, otherwise useEffect will run every time the httpConfig object reference changes.\n\n    if (!R.equals(newHttpConfig, ref.current)) {\n      ref.current = newHttpConfig;\n    }\n\n    return ref.current;\n  };\n\n  useEffect(function () {\n    if (!wallet || !wallet.publicKey) return;\n    dispatchGatekeeperRecord();\n  }, [gatewayToken === null || gatewayToken === void 0 ? void 0 : gatewayToken.state, gatewayToken === null || gatewayToken === void 0 ? void 0 : gatewayToken.expiryTime, gatekeeperNetworkAddress, useHttpConfigRef(httpConfig)]);\n  return {\n    dispatchGatekeeperRecord: dispatchGatekeeperRecord\n  };\n};\n\nexport default useGetGatekeeperRecord;","map":{"version":3,"sources":["F:/SitePortfolio/skillfond/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/useGatekeeperRecord.js"],"names":["useEffect","useRef","R","GatekeeperRecordState","GatewayStatus","logger","useWalletHooks","reducer","state","action","type","Object","assign","gatewayStatus","CHECKING","gatekeeperRecordState","undefined","gatekeeperRecord","civicPass","requestPayload","payload","LOCATION_NOT_SUPPORTED","NOT_REQUESTED","useGetGatekeeperRecord","dispatch","wallet","gatekeeperClient","httpConfig","expectWalletConnected","logDebug","message","obj","debug","gatewayToken","gatekeeperNetworkAddress","dispatchFetch","dispatchFailure","SERVER_FAILURE","dispatchSuccess","record","dispatchLocationNotSupported","dispatchIssuedLocationNotSupported","dispatchRecordNotFound","getAction","actions","REQUESTED","ISSUED","ISSUED_EXPIRED","ISSUED_EXPIRY_APPROACHING","ISSUED_LOCATION_NOT_SUPPORTED","dispatchGatekeeperRecord","walletAddress","getGatekeeperRecordWithPayload","publicKey","error","useHttpConfigRef","newHttpConfig","ref","equals","current","expiryTime"],"mappings":"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","sourcesContent":["import { useEffect, useRef } from 'react';\nimport * as R from 'ramda';\nimport { GatekeeperRecordState, GatewayStatus } from '../types';\nimport logger from '../logger';\nimport useWalletHooks from './useWalletHooks';\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        case 'getGatekeeperRecord':\n            return Object.assign(Object.assign({}, state), { gatewayStatus: GatewayStatus.CHECKING, gatekeeperRecordState: undefined });\n        case 'getGatekeeperRecord_failure':\n            return Object.assign(Object.assign({}, state), { gatekeeperRecordState: action.gatekeeperRecord.state });\n        case 'getGatekeeperRecord_success':\n            return Object.assign(Object.assign({}, state), { gatekeeperRecordState: action.gatekeeperRecord.state, civicPass: Object.assign(Object.assign({}, state.civicPass), { requestPayload: action.gatekeeperRecord.payload }) });\n        case 'getGatekeeperRecord_location_not_supported':\n            return Object.assign(Object.assign({}, state), { gatewayStatus: GatewayStatus.LOCATION_NOT_SUPPORTED, gatekeeperRecordState: action.gatekeeperRecord.state, civicPass: Object.assign(Object.assign({}, state.civicPass), { requestPayload: action.gatekeeperRecord.payload }) });\n        case 'getGatekeeperRecord_issued_location_not_supported':\n            return Object.assign(Object.assign({}, state), { gatewayStatus: GatewayStatus.LOCATION_NOT_SUPPORTED, gatekeeperRecordState: action.gatekeeperRecord.state, civicPass: Object.assign(Object.assign({}, state.civicPass), { requestPayload: action.gatekeeperRecord.payload }) });\n        case 'getGatekeeperRecord_not_found':\n            return Object.assign(Object.assign({}, state), { gatewayStatus: GatewayStatus.NOT_REQUESTED, gatekeeperRecordState: action.gatekeeperRecord.state });\n        default:\n            return state;\n    }\n};\nconst useGetGatekeeperRecord = ({ wallet, gatekeeperClient, httpConfig, }, state, dispatch) => {\n    const { expectWalletConnected } = useWalletHooks(wallet, state, dispatch);\n    const logDebug = (message, obj = null) => logger.debug(`[useGetGatekeeperRecord] ${message}`, obj);\n    const { gatewayToken, gatekeeperNetworkAddress } = state;\n    const dispatchFetch = () => ({\n        type: 'getGatekeeperRecord',\n    });\n    const dispatchFailure = () => ({\n        type: 'getGatekeeperRecord_failure',\n        gatekeeperRecord: { state: GatekeeperRecordState.SERVER_FAILURE, payload: undefined },\n    });\n    const dispatchSuccess = (record) => ({\n        type: 'getGatekeeperRecord_success',\n        gatekeeperRecord: record,\n    });\n    const dispatchLocationNotSupported = (record) => ({\n        type: 'getGatekeeperRecord_location_not_supported',\n        gatekeeperRecord: record,\n    });\n    const dispatchIssuedLocationNotSupported = (record) => ({\n        type: 'getGatekeeperRecord_issued_location_not_supported',\n        gatekeeperRecord: record,\n    });\n    const dispatchRecordNotFound = (record) => ({\n        type: 'getGatekeeperRecord_not_found',\n        gatekeeperRecord: record,\n    });\n    const getAction = (gatekeeperRecordState) => {\n        const actions = {\n            [GatekeeperRecordState.REQUESTED]: () => dispatchSuccess(gatekeeperRecordState),\n            [GatekeeperRecordState.ISSUED]: () => dispatchSuccess(gatekeeperRecordState),\n            [GatekeeperRecordState.ISSUED_EXPIRED]: () => dispatchSuccess(gatekeeperRecordState),\n            [GatekeeperRecordState.ISSUED_EXPIRY_APPROACHING]: () => dispatchSuccess(gatekeeperRecordState),\n            [GatekeeperRecordState.ISSUED_LOCATION_NOT_SUPPORTED]: () => dispatchIssuedLocationNotSupported(gatekeeperRecordState),\n            [GatekeeperRecordState.LOCATION_NOT_SUPPORTED]: () => dispatchLocationNotSupported(gatekeeperRecordState),\n            [GatekeeperRecordState.NOT_REQUESTED]: () => dispatchRecordNotFound(gatekeeperRecordState),\n        };\n        return actions[gatekeeperRecordState.state];\n    };\n    /**\n     * Check to see if there is getGatekeeperRecord and dispatch actions based on the state of the record.\n     * If the service call fails dispatch a failure.\n     */\n    const dispatchGatekeeperRecord = async () => {\n        const walletAddress = expectWalletConnected();\n        logDebug('Fetching Gatekeeper record');\n        dispatch(dispatchFetch());\n        try {\n            const record = await gatekeeperClient().getGatekeeperRecordWithPayload(walletAddress.publicKey);\n            logDebug('Gatekeeper record response state: ', GatekeeperRecordState[record.state]);\n            const action = getAction(record);\n            if (!action) {\n                logger.error('Cannot dispatch action for invalid Gatekeeper Record State.', { record });\n                return;\n            }\n            dispatch(action());\n        }\n        catch (error) {\n            logger.error('Failed to fetch Gatekeeper record', error);\n            dispatch(dispatchFailure());\n            throw error;\n        }\n    };\n    const useHttpConfigRef = (newHttpConfig) => {\n        const ref = useRef();\n        // We have to perform a deep equality check, otherwise useEffect will run every time the httpConfig object reference changes.\n        if (!R.equals(newHttpConfig, ref.current)) {\n            ref.current = newHttpConfig;\n        }\n        return ref.current;\n    };\n    useEffect(() => {\n        if (!wallet || !wallet.publicKey)\n            return;\n        dispatchGatekeeperRecord();\n    }, [gatewayToken === null || gatewayToken === void 0 ? void 0 : gatewayToken.state, gatewayToken === null || gatewayToken === void 0 ? void 0 : gatewayToken.expiryTime, gatekeeperNetworkAddress, useHttpConfigRef(httpConfig)]);\n    return { dispatchGatekeeperRecord };\n};\nexport default useGetGatekeeperRecord;\n"]},"metadata":{},"sourceType":"module"}